  train.cpp
C:\mytinyrenderproj\MyRenderer\3dgs\util.h(2,1): warning C4005: “_CRT_SECURE_NO_WARNINGS”: 宏重定义
C:\mytinyrenderproj\MyRenderer\3dgs\util.h(2,1): message : 之前在命令行上声明的“_CRT_SECURE_NO_WARNINGS”
C:\PCL 1.14.1\3rdParty\Eigen3\include\eigen3\Eigen\src\Core\arch\Default\Half.h(1,1): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失
C:\PCL 1.14.1\3rdParty\Eigen3\include\eigen3\Eigen\src\Core\arch\Default\BFloat16.h(1,1): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失
C:\PCL 1.14.1\3rdParty\Eigen3\include\eigen3\Eigen\src\Core\arch\Default\GenericPacketMathFunctions.h(676,1): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失
C:\libtorchInclude\c10\util\Exception.h(30,45): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 class“c10::Error”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\exception(38,19): message : 参见“std::exception”的声明
C:\libtorchInclude\c10\util\Exception.h(30,15): message : 参见“c10::Error”的声明
C:\libtorchInclude\c10\util\Exception.h(33,15): warning C4251: “c10::Error::msg_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\c10\util\Exception.h(38,28): warning C4251: “c10::Error::context_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\c10\util\Exception.h(43,13): warning C4251: “c10::Error::backtrace_”: class“std::shared_ptr<const c10::LazyValue<std::string>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\libtorchInclude\c10\util\Backtrace.h(16,24): message : 参见“std::shared_ptr<const c10::LazyValue<std::string>>”的声明
C:\libtorchInclude\c10\util\Exception.h(50,39): warning C4251: “c10::Error::what_”: class“c10::OptimisticLazy<std::string>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(50,11): message : 参见“c10::OptimisticLazy<std::string>”的声明
C:\libtorchInclude\c10\util\Exception.h(51,15): warning C4251: “c10::Error::what_without_backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\c10\util\Exception.h(150,21): warning C4251: “c10::Warning::type_”: class“std::variant<c10::Warning::UserWarning,c10::Warning::DeprecationWarning>”需要有 dll 接口由 class“c10::Warning”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(122,34): message : 参见“std::variant<c10::Warning::UserWarning,c10::Warning::DeprecationWarning>”的声明
C:\libtorchInclude\c10\util\Exception.h(156,15): warning C4251: “c10::Warning::msg_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Warning”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\c10\core\DispatchKeySet.h(442,1): warning C4267: “return”: 从“size_t”转换到“uint8_t”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(216,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(219,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(222,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(225,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(229,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(232,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(235,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(238,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(244,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(247,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(250,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(253,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(257,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(260,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(263,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\BFloat16-inl.h(266,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(162,41): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(165,41): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(168,41): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(171,41): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(175,37): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(178,37): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(181,37): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(184,37): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(190,41): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(193,41): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(196,41): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(199,41): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(203,37): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(206,37): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(209,37): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fn-inl.h(212,37): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(163,43): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(166,43): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(169,43): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(172,43): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(176,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(179,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(182,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(185,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(191,43): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(194,43): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(197,43): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(200,43): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(204,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(207,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(210,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e4m3fnuz-inl.h(213,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(231,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(234,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(237,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(240,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(244,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(247,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(250,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(253,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(259,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(262,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(265,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(268,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(272,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(275,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(278,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Half-inl.h(281,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(170,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(173,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(176,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(179,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(183,35): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(186,35): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(189,35): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(192,35): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(198,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(201,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(204,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(207,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(211,35): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(214,35): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(217,35): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2-inl.h(220,35): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(167,43): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(170,43): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(173,43): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(176,43): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(180,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(183,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(186,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(189,39): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(195,43): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(198,43): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(201,43): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(204,43): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(208,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(211,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(214,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\Float8_e5m2fnuz-inl.h(217,39): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\libtorchInclude\c10\util\intrusive_ptr.h(83,33): warning C4251: “c10::intrusive_ptr_target::refcount_”: struct“std::atomic<unsigned int>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\atomic(2681,35): message : 参见“std::atomic<unsigned int>”的声明
C:\libtorchInclude\c10\util\intrusive_ptr.h(84,33): warning C4251: “c10::intrusive_ptr_target::weakcount_”: struct“std::atomic<unsigned int>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\atomic(2681,35): message : 参见“std::atomic<unsigned int>”的声明
C:\libtorchInclude\c10\core\SymBool.h(83,11): warning C4251: “c10::SymBool::ptr_”: class“c10::intrusive_ptr<c10::SymNodeImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 class“c10::SymBool”的客户端使用
          with
          [
              TTarget=c10::SymNodeImpl
          ]
C:\libtorchInclude\c10\core\SymNodeImpl.h(15,22): message : 参见“c10::intrusive_ptr<c10::SymNodeImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::SymNodeImpl
          ]
C:\libtorchInclude\c10\core\SymFloat.h(109,11): warning C4251: “c10::SymFloat::ptr_”: class“c10::intrusive_ptr<c10::SymNodeImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 class“c10::SymFloat”的客户端使用
          with
          [
              TTarget=c10::SymNodeImpl
          ]
C:\libtorchInclude\c10\core\SymNodeImpl.h(15,22): message : 参见“c10::intrusive_ptr<c10::SymNodeImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::SymNodeImpl
          ]
C:\libtorchInclude\c10\core\Scalar.h(419,5): warning C4251: “c10::Scalar::v”: union“c10::Scalar::v_t”需要有 dll 接口由 class“c10::Scalar”的客户端使用
C:\libtorchInclude\c10\core\Scalar.h(410,9): message : 参见“c10::Scalar::v_t”的声明
C:\libtorchInclude\c10\core\Scalar.h(139,3): warning C4244: “参数”: 从“double”转换到“From”，可能丢失数据
          with
          [
              From=int64_t
          ]
C:\libtorchInclude\c10\core\Scalar.h(140,3): warning C4244: “参数”: 从“double”转换到“From”，可能丢失数据
          with
          [
              From=int64_t
          ]
C:\libtorchInclude\c10\core\Scalar.h(141,3): warning C4244: “参数”: 从“double”转换到“From”，可能丢失数据
          with
          [
              From=int64_t
          ]
C:\libtorchInclude\c10\core\Scalar.h(142,3): warning C4244: “参数”: 从“double”转换到“From”，可能丢失数据
          with
          [
              From=int64_t
          ]
C:\libtorchInclude\c10\util\typeid.h(61,67): warning C4251: “c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>::id_”: struct“c10::util::type_index”需要有 dll 接口由 class“c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>”的客户端使用
C:\libtorchInclude\c10\util\TypeIndex.h(63,8): message : 参见“c10::util::type_index”的声明
C:\libtorchInclude\c10\util\ThreadLocalDebugInfo.h(54,34): warning C4251: “c10::ThreadLocalDebugInfo::info_”: class“std::shared_ptr<c10::DebugInfoBase>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
C:\libtorchInclude\c10\util\ThreadLocalDebugInfo.h(45,46): message : 参见“std::shared_ptr<c10::DebugInfoBase>”的声明
C:\libtorchInclude\c10\util\ThreadLocalDebugInfo.h(56,41): warning C4251: “c10::ThreadLocalDebugInfo::parent_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
C:\libtorchInclude\c10\util\ThreadLocalDebugInfo.h(38,15): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\libtorchInclude\c10\util\ThreadLocalDebugInfo.h(80,41): warning C4251: “c10::DebugInfoGuard::prev_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::DebugInfoGuard”的客户端使用
C:\libtorchInclude\c10\util\ThreadLocalDebugInfo.h(38,15): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\libtorchInclude\c10\core\Allocator.h(28,30): warning C4251: “c10::DataPtr::ptr_”: class“c10::detail::UniqueVoidPtr”需要有 dll 接口由 class“c10::DataPtr”的客户端使用
C:\libtorchInclude\c10\util\UniqueVoidPtr.h(41,7): message : 参见“c10::detail::UniqueVoidPtr”的声明
C:\libtorchInclude\c10\core\Allocator.h(227,30): warning C4251: “c10::InefficientStdFunctionContext::deleter_”: class“std::function<void (void *)>”需要有 dll 接口由 struct“c10::InefficientStdFunctionContext”的客户端使用
C:\libtorchInclude\c10\core\Allocator.h(227,8): message : 参见“std::function<void (void *)>”的声明
C:\libtorchInclude\c10\core\impl\COWDeleter.h(53,21): warning C4251: “c10::impl::cow::COWDeleterContext::mutex_”: class“std::shared_mutex”需要有 dll 接口由 class“c10::impl::cow::COWDeleterContext”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\shared_mutex(30,19): message : 参见“std::shared_mutex”的声明
C:\libtorchInclude\c10\core\impl\COWDeleter.h(54,39): warning C4251: “c10::impl::cow::COWDeleterContext::data_”: class“std::unique_ptr<void,c10::DeleterFnPtr>”需要有 dll 接口由 class“c10::impl::cow::COWDeleterContext”的客户端使用
C:\libtorchInclude\c10\util\UniqueVoidPtr.h(45,8): message : 参见“std::unique_ptr<void,c10::DeleterFnPtr>”的声明
C:\libtorchInclude\c10\core\impl\COWDeleter.h(55,29): warning C4251: “c10::impl::cow::COWDeleterContext::refcount_”: struct“std::atomic<__int64>”需要有 dll 接口由 class“c10::impl::cow::COWDeleterContext”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\atomic(2684,35): message : 参见“std::atomic<__int64>”的声明
C:\libtorchInclude\c10\core\impl\HermeticPyObjectTLS.h(55,28): warning C4251: “c10::impl::HermeticPyObjectTLS::haveState_”: struct“std::atomic<bool>”需要有 dll 接口由 struct“c10::impl::HermeticPyObjectTLS”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\atomic(2673,33): message : 参见“std::atomic<bool>”的声明
C:\libtorchInclude\c10\core\SymIntArrayRef.h(62,26): warning C4244: “初始化”: 从“const T”转换到“long”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\libtorchInclude\c10\core\impl\PyObjectSlot.h(167,31): warning C4251: “c10::impl::PyObjectSlot::pyobj_interpreter_”: struct“std::atomic<c10::impl::PyInterpreter *>”需要有 dll 接口由 struct“c10::impl::PyObjectSlot”的客户端使用
C:\libtorchInclude\c10\core\impl\PyObjectSlot.h(167,8): message : 参见“std::atomic<c10::impl::PyInterpreter *>”的声明
C:\libtorchInclude\c10\core\Storage.h(206,35): warning C4251: “c10::Storage::storage_impl_”: class“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::Storage”的客户端使用
          with
          [
              TTarget=c10::StorageImpl
          ]
C:\libtorchInclude\c10\core\impl\COW.h(20,14): message : 参见“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::StorageImpl
          ]
C:\libtorchInclude\c10\core\impl\LocalDispatchKeySet.h(59,18): warning C4251: “c10::impl::LocalDispatchKeySet::included_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
C:\libtorchInclude\c10\core\DispatchKeySet.h(165,7): message : 参见“c10::DispatchKeySet”的声明
C:\libtorchInclude\c10\core\impl\LocalDispatchKeySet.h(60,18): warning C4251: “c10::impl::LocalDispatchKeySet::excluded_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
C:\libtorchInclude\c10\core\DispatchKeySet.h(165,7): message : 参见“c10::DispatchKeySet”的声明
C:\libtorchInclude\c10\core\impl\LocalDispatchKeySet.h(97,18): warning C4251: “c10::impl::IncludeDispatchKeyGuard::include_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::IncludeDispatchKeyGuard”的客户端使用
C:\libtorchInclude\c10\core\DispatchKeySet.h(165,7): message : 参见“c10::DispatchKeySet”的声明
C:\libtorchInclude\c10\core\impl\LocalDispatchKeySet.h(115,18): warning C4251: “c10::impl::ExcludeDispatchKeyGuard::exclude_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::ExcludeDispatchKeyGuard”的客户端使用
C:\libtorchInclude\c10\core\DispatchKeySet.h(165,7): message : 参见“c10::DispatchKeySet”的声明
C:\libtorchInclude\c10\core\SymbolicShapeMeta.h(18,16): warning C4251: “c10::SymbolicShapeMeta::sizes_”: class“c10::SmallVector<c10::SymInt,5>”需要有 dll 接口由 class“c10::SymbolicShapeMeta”的客户端使用
C:\libtorchInclude\c10\util\DimVector.h(15,22): message : 参见“c10::SmallVector<c10::SymInt,5>”的声明
C:\libtorchInclude\c10\core\SymbolicShapeMeta.h(19,16): warning C4251: “c10::SymbolicShapeMeta::strides_”: class“c10::SmallVector<c10::SymInt,5>”需要有 dll 接口由 class“c10::SymbolicShapeMeta”的客户端使用
C:\libtorchInclude\c10\util\DimVector.h(15,22): message : 参见“c10::SmallVector<c10::SymInt,5>”的声明
C:\libtorchInclude\c10\core\SymbolicShapeMeta.h(192,28): warning C4251: “c10::SymbolicShapeMeta::available_”: struct“std::atomic<int>”需要有 dll 接口由 class“c10::SymbolicShapeMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\atomic(2680,35): message : 参见“std::atomic<int>”的声明
C:\libtorchInclude\c10\core\SymbolicShapeMeta.h(204,22): warning C4251: “c10::SymbolicShapeMeta::mutables_”: class“std::mutex”需要有 dll 接口由 class“c10::SymbolicShapeMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(86,19): message : 参见“std::mutex”的声明
C:\libtorchInclude\c10\core\TensorImpl.h(233,43): warning C4251: “c10::ExtraMeta::symbolic_shape_meta_”: class“std::unique_ptr<c10::SymbolicShapeMeta,std::default_delete<c10::SymbolicShapeMeta>>”需要有 dll 接口由 struct“c10::ExtraMeta”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(233,8): message : 参见“std::unique_ptr<c10::SymbolicShapeMeta,std::default_delete<c10::SymbolicShapeMeta>>”的声明
C:\libtorchInclude\c10\core\TensorImpl.h(234,50): warning C4251: “c10::ExtraMeta::named_tensor_meta_”: class“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”需要有 dll 接口由 struct“c10::ExtraMeta”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(200,16): message : 参见“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”的声明
C:\libtorchInclude\c10\core\TensorImpl.h(235,35): warning C4251: “c10::ExtraMeta::backend_meta_”: class“c10::intrusive_ptr<c10::BackendMeta,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::ExtraMeta”的客户端使用
          with
          [
              TTarget=c10::BackendMeta
          ]
C:\libtorchInclude\c10\core\TensorImpl.h(226,11): message : 参见“c10::intrusive_ptr<c10::BackendMeta,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::BackendMeta
          ]
C:\libtorchInclude\c10\core\TensorImpl.h(236,30): warning C4251: “c10::ExtraMeta::custom_data_ptr_error_msg_”: class“std::optional<std::string>”需要有 dll 接口由 struct“c10::ExtraMeta”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(236,8): message : 参见“std::optional<std::string>”的声明
C:\libtorchInclude\c10\core\TensorImpl.h(237,30): warning C4251: “c10::ExtraMeta::custom_storage_error_msg_”: class“std::optional<std::string>”需要有 dll 接口由 struct“c10::ExtraMeta”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(236,8): message : 参见“std::optional<std::string>”的声明
C:\libtorchInclude\c10\core\TensorImpl.h(323,38): warning C4251: “c10::VariableVersion::version_counter_”: class“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::VariableVersion”的客户端使用
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
C:\libtorchInclude\c10\core\TensorImpl.h(323,8): message : 参见“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
C:\libtorchInclude\c10\core\TensorImpl.h(397,34): warning C4244: “参数”: 从“int64_t”转换到“const _Ty”，可能丢失数据
          with
          [
              _Ty=unsigned int
          ]
C:\libtorchInclude\c10\core\TensorImpl.h(2856,47): warning C4251: “c10::TensorImpl::autograd_meta_”: class“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(181,16): message : 参见“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”的声明
C:\libtorchInclude\c10\core\TensorImpl.h(2859,35): warning C4251: “c10::TensorImpl::extra_meta_”: class“std::unique_ptr<c10::ExtraMeta,std::default_delete<c10::ExtraMeta>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(271,8): message : 参见“std::unique_ptr<c10::ExtraMeta,std::default_delete<c10::ExtraMeta>>”的声明
C:\libtorchInclude\c10\core\TensorImpl.h(2890,30): warning C4251: “c10::TensorImpl::device_opt_”: class“std::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\libtorchInclude\c10\core\StorageImpl.h(328,10): message : 参见“std::optional<c10::Device>”的声明
C:\libtorchInclude\c10\core\TensorImpl.h(3013,18): warning C4251: “c10::TensorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\libtorchInclude\c10\core\DispatchKeySet.h(165,7): message : 参见“c10::DispatchKeySet”的声明
C:\libtorchInclude\ATen\core\DeprecatedTypePropertiesRegistry.h(26,45): warning C4251: “at::DeprecatedTypePropertiesRegistry::registry”: class“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”需要有 dll 接口由 class“at::DeprecatedTypePropertiesRegistry”的客户端使用
C:\libtorchInclude\ATen\core\DeprecatedTypePropertiesRegistry.h(26,8): message : 参见“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”的声明
C:\libtorchInclude\c10\core\GeneratorImpl.h(82,14): warning C4251: “c10::GeneratorImpl::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(86,19): message : 参见“std::mutex”的声明
C:\libtorchInclude\c10\core\GeneratorImpl.h(98,18): warning C4251: “c10::GeneratorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\libtorchInclude\c10\core\DispatchKeySet.h(165,7): message : 参见“c10::DispatchKeySet”的声明
C:\libtorchInclude\ATen\core\Generator.h(140,42): warning C4251: “at::Generator::impl_”: class“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“at::Generator”的客户端使用
          with
          [
              TTarget=c10::GeneratorImpl
          ]
C:\libtorchInclude\c10\core\GeneratorImpl.h(66,8): message : 参见“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::GeneratorImpl
          ]
C:\libtorchInclude\ATen\core\NamedTensor.h(68,24): warning C4251: “at::NamedTensorMeta::names_”: class“std::vector<at::Dimname,std::allocator<at::Dimname>>”需要有 dll 接口由 struct“at::NamedTensorMeta”的客户端使用
C:\libtorchInclude\ATen\core\NamedTensor.h(34,51): message : 参见“std::vector<at::Dimname,std::allocator<at::Dimname>>”的声明
C:\libtorchInclude\ATen\core\TensorBase.h(917,55): warning C4251: “at::TensorBase::impl_”: class“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”需要有 dll 接口由 class“at::TensorBase”的客户端使用
C:\libtorchInclude\ATen\core\TensorBase.h(99,12): message : 参见“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”的声明
C:\libtorchInclude\torch\csrc\autograd\forward_grad.h(122,52): warning C4251: “torch::autograd::ForwardADLevel::grads_”: class“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\forward_grad.h(122,8): message : 参见“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”的声明
C:\libtorchInclude\torch\csrc\autograd\forward_grad.h(123,14): warning C4251: “torch::autograd::ForwardADLevel::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(86,19): message : 参见“std::mutex”的声明
C:\libtorchInclude\torch\csrc\autograd\forward_grad.h(127,74): warning C4251: “std::enable_shared_from_this<torch::autograd::ForwardGrad>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::ForwardGrad>”的客户端使用
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory(1462,23): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\libtorchInclude\torch\csrc\autograd\forward_grad.h(206,44): warning C4251: “torch::autograd::ForwardGrad::content_”: class“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\forward_grad.h(206,8): message : 参见“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”的声明
C:\libtorchInclude\torch\csrc\autograd\forward_grad.h(207,22): warning C4251: “torch::autograd::ForwardGrad::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(86,19): message : 参见“std::mutex”的声明
C:\libtorchInclude\ATen\core\jit_type_base.h(659,92): warning C4251: “std::enable_shared_from_this<c10::SharedType>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<c10::SharedType>”的客户端使用
          with
          [
              _Ty=c10::SharedType
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory(3028,16): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=c10::SharedType
          ]
C:\libtorchInclude\ATen\core\jit_type_base.h(708,32): warning C4251: “c10::NamedType::name_”: class“std::optional<c10::QualifiedName>”需要有 dll 接口由 struct“c10::NamedType”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(691,31): message : 参见“std::optional<c10::QualifiedName>”的声明
C:\libtorchInclude\ATen\core\ivalue.h(1373,11): warning C4251: “c10::IValue::payload”: union“c10::IValue::Payload”需要有 dll 接口由 struct“c10::IValue”的客户端使用
C:\libtorchInclude\ATen\core\ivalue.h(1334,9): message : 参见“c10::IValue::Payload”的声明
C:\libtorchInclude\ATen\core\ivalue.h(1495,11): warning C4251: “c10::WeakIValue::payload”: union“c10::IValue::Payload::TriviallyCopyablePayload”需要有 dll 接口由 struct“c10::WeakIValue”的客户端使用
C:\libtorchInclude\ATen\core\ivalue.h(1341,11): message : 参见“c10::IValue::Payload::TriviallyCopyablePayload”的声明
C:\libtorchInclude\ATen\core\ivalue.h(1506,48): warning C4251: “c10::StrongTypePtr::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
C:\libtorchInclude\ATen\core\ivalue.h(1504,22): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
C:\libtorchInclude\ATen\core\ivalue.h(1507,11): warning C4251: “c10::StrongTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\ivalue.h(1518,46): warning C4251: “c10::WeakTypePtr::cu_”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 struct“c10::WeakTypePtr”的客户端使用
          with
          [
              _Ty=torch::jit::CompilationUnit
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory(1462,23): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::CompilationUnit
          ]
C:\libtorchInclude\ATen\core\ivalue.h(1519,11): warning C4251: “c10::WeakTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::WeakTypePtr”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\ivalue.h(1567,31): warning C4251: “c10::WeakOrStrongTypePtr::cu_”: struct“c10::WeakOrStrongCompilationUnit”需要有 dll 接口由 struct“c10::WeakOrStrongTypePtr”的客户端使用
C:\libtorchInclude\ATen\core\ivalue.h(1523,8): message : 参见“c10::WeakOrStrongCompilationUnit”的声明
C:\libtorchInclude\ATen\core\ivalue.h(1568,11): warning C4251: “c10::WeakOrStrongTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::WeakOrStrongTypePtr”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(180,26): warning C4251: “c10::UnionType::types_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::UnionType”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(582,30): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(240,11): warning C4251: “c10::OptionalType::contained_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::OptionalType”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(291,25): warning C4251: “c10::Stride::stride_index_”: class“std::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\libtorchInclude\ATen\core\jit_type.h(277,18): message : 参见“std::optional<size_t>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(292,23): warning C4251: “c10::Stride::contiguous_”: class“std::optional<bool>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(218,16): message : 参见“std::optional<bool>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(293,25): warning C4251: “c10::Stride::stride_”: class“std::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\libtorchInclude\ATen\core\jit_type.h(277,18): message : 参见“std::optional<size_t>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(359,30): warning C4251: “c10::ShapeSymbol::num_symbols”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 struct“c10::ShapeSymbol”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\atomic(2685,35): message : 参见“std::atomic<unsigned __int64>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(485,45): warning C4251: “c10::SymbolicShape::dims_”: class“std::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”需要有 dll 接口由 struct“c10::SymbolicShape”的客户端使用
C:\libtorchInclude\ATen\core\jit_type.h(440,8): message : 参见“std::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(844,33): warning C4251: “c10::TensorType::scalar_type_”: class“std::optional<c10::ScalarType>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\libtorchInclude\c10\core\ScalarTypeToTypeMeta.h(30,8): message : 参见“std::optional<c10::ScalarType>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(845,29): warning C4251: “c10::TensorType::device_”: class“std::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\libtorchInclude\c10\core\StorageImpl.h(328,10): message : 参见“std::optional<c10::Device>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(847,24): warning C4251: “c10::TensorType::strides_”: struct“c10::VaryingShape<c10::Stride>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\libtorchInclude\ATen\core\jit_type.h(596,13): message : 参见“c10::VaryingShape<c10::Stride>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(848,23): warning C4251: “c10::TensorType::requires_grad_”: class“std::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(218,16): message : 参见“std::optional<bool>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(860,23): warning C4251: “c10::TensorType::undefined_”: class“std::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(218,16): message : 参见“std::optional<bool>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(868,62): warning C4251: “c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(1008,24): warning C4251: “c10::DictType::types”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::DictType”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(582,30): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(1016,66): warning C4251: “c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(1058,64): warning C4251: “c10::SingleElementType<c10::TypeKind::AwaitType,c10::AwaitType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::AwaitType,c10::AwaitType>”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(1100,62): warning C4251: “c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(1230,24): warning C4251: “c10::TupleType::elements_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(582,30): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(1232,35): warning C4251: “c10::TupleType::schema_”: class“std::shared_ptr<c10::FunctionSchema>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
C:\libtorchInclude\ATen\core\jit_type.h(1190,14): message : 参见“std::shared_ptr<c10::FunctionSchema>”的声明
C:\libtorchInclude\ATen\core\jit_type.h(2208,48): warning C4251: “c10::InterfaceType::methods_”: class“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”需要有 dll 接口由 struct“c10::InterfaceType”的客户端使用
C:\libtorchInclude\ATen\core\jit_type.h(2208,8): message : 参见“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”的声明
C:\libtorchInclude\c10\util\logging_is_not_google_glog.h(43,21): warning C4251: “c10::MessageLogger::stream_”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::MessageLogger”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\iosfwd(241,35): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(298,21): warning C4251: “c10::ivalue::ConstantString::str_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::ConstantString”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(667,24): warning C4251: “c10::ivalue::Tuple::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Tuple”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(865,62): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“c10::ivalue::Future::FutureError”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\exception(38,19): message : 参见“std::exception”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(865,20): message : 参见“c10::ivalue::Future::FutureError”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(875,17): warning C4251: “c10::ivalue::Future::FutureError::error_msg”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::Future::FutureError”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1360,22): warning C4251: “c10::ivalue::Future::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(86,19): message : 参见“std::mutex”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1361,20): warning C4251: “c10::ivalue::Future::completed_”: struct“std::atomic<bool>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\atomic(2673,33): message : 参见“std::atomic<bool>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1362,27): warning C4251: “c10::ivalue::Future::finished_cv_”: class“std::condition_variable”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(573,19): message : 参见“std::condition_variable”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1365,11): warning C4251: “c10::ivalue::Future::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1366,31): warning C4251: “c10::ivalue::Future::callbacks_”: class“std::vector<c10::ivalue::Future::FutureCallback,std::allocator<c10::ivalue::Future::FutureCallback>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\libtorchInclude\ATen\core\ivalue_inl.h(1366,8): message : 参见“std::vector<c10::ivalue::Future::FutureCallback,std::allocator<c10::ivalue::Future::FutureCallback>>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1367,22): warning C4251: “c10::ivalue::Future::eptr_”: class“std::exception_ptr”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\exception(221,19): message : 参见“std::exception_ptr”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1372,37): warning C4251: “c10::ivalue::Future::impl_”: class“c10::impl::VirtualGuardImpl”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\libtorchInclude\c10\core\impl\VirtualGuardImpl.h(11,7): message : 参见“c10::impl::VirtualGuardImpl”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1377,25): warning C4251: “c10::ivalue::Future::currentDevice_”: class“std::optional<c10::Device>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\libtorchInclude\c10\core\StorageImpl.h(328,10): message : 参见“std::optional<c10::Device>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1383,27): warning C4251: “c10::ivalue::Future::events_”: class“std::vector<c10::Event,std::allocator<c10::Event>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\libtorchInclude\ATen\core\ivalue_inl.h(1383,8): message : 参见“std::vector<c10::Event,std::allocator<c10::Event>>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1387,28): warning C4251: “c10::ivalue::Future::storages_”: class“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\libtorchInclude\ATen\core\ivalue_inl.h(912,26): message : 参见“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1396,34): warning C4251: “c10::ivalue::Future::devices_”: class“std::vector<c10::Device,std::allocator<c10::Device>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\libtorchInclude\ATen\core\ivalue_inl.h(843,38): message : 参见“std::vector<c10::Device,std::allocator<c10::Device>>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1463,11): warning C4251: “c10::ivalue::Await::elType_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Await”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1464,11): warning C4251: “c10::ivalue::Await::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Await”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1465,23): warning C4251: “c10::ivalue::Await::args_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ivalue::Await”的客户端使用
C:\libtorchInclude\c10\core\impl\PyInterpreter.h(24,20): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1466,27): warning C4251: “c10::ivalue::Await::fn_”: class“std::function<c10::IValue (void)>”需要有 dll 接口由 struct“c10::ivalue::Await”的客户端使用
C:\libtorchInclude\ATen\core\ivalue_inl.h(1401,39): message : 参见“std::function<c10::IValue (void)>”的声明
C:\libtorchInclude\ATen\core\ivalue_inl.h(1606,23): warning C4251: “c10::ivalue::Object::slots_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ivalue::Object”的客户端使用
C:\libtorchInclude\c10\core\impl\PyInterpreter.h(24,20): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\libtorchInclude\ATen\TensorNames.h(41,21): warning C4251: “at::namedinference::TensorName::origin_”: class“c10::ArrayRef<at::Dimname>”需要有 dll 接口由 struct“at::namedinference::TensorName”的客户端使用
C:\libtorchInclude\ATen\core\Dimname.h(36,26): message : 参见“c10::ArrayRef<at::Dimname>”的声明
C:\libtorchInclude\ATen\TensorNames.h(72,17): warning C4251: “at::namedinference::TensorNames::names_”: class“c10::SmallVector<at::namedinference::TensorName,10>”需要有 dll 接口由 struct“at::namedinference::TensorNames”的客户端使用
C:\libtorchInclude\ATen\TensorNames.h(50,23): message : 参见“c10::SmallVector<at::namedinference::TensorName,10>”的声明
C:\libtorchInclude\torch\csrc\autograd\variable.h(206,15): warning C4251: “torch::autograd::AutogradMeta::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\autograd\variable.h(209,25): warning C4251: “torch::autograd::AutogradMeta::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\libtorchInclude\ATen\core\TensorBase.h(828,14): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\libtorchInclude\torch\csrc\autograd\variable.h(210,23): warning C4251: “torch::autograd::AutogradMeta::grad_accumulator_”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
          with
          [
              _Ty=torch::autograd::Node
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory(1462,23): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::autograd::Node
          ]
C:\libtorchInclude\torch\csrc\autograd\variable.h(221,40): warning C4251: “torch::autograd::AutogradMeta::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\forward_grad.h(111,25): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
C:\libtorchInclude\torch\csrc\autograd\variable.h(233,49): warning C4251: “torch::autograd::AutogradMeta::hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\variable.h(182,16): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”的声明
C:\libtorchInclude\torch\csrc\autograd\variable.h(234,31): warning C4251: “torch::autograd::AutogradMeta::cpp_hooks_list_”: class“std::shared_ptr<torch::autograd::hooks_list>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\cpp_hook.h(12,33): message : 参见“std::shared_ptr<torch::autograd::hooks_list>”的声明
C:\libtorchInclude\torch\csrc\autograd\variable.h(240,43): warning C4251: “torch::autograd::AutogradMeta::post_acc_grad_hooks_”: class“std::unique_ptr<torch::autograd::PostAccumulateGradHook,std::default_delete<torch::autograd::PostAccumulateGradHook>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\variable.h(187,10): message : 参见“std::unique_ptr<torch::autograd::PostAccumulateGradHook,std::default_delete<torch::autograd::PostAccumulateGradHook>>”的声明
C:\libtorchInclude\torch\csrc\autograd\variable.h(261,22): warning C4251: “torch::autograd::AutogradMeta::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(86,19): message : 参见“std::mutex”的声明
C:\libtorchInclude\torch\csrc\autograd\variable.h(419,29): warning C4251: “torch::autograd::ViewInfo::view_fn_”: class“std::unique_ptr<torch::autograd::ViewFunc,std::default_delete<torch::autograd::ViewFunc>>”需要有 dll 接口由 struct“torch::autograd::ViewInfo”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\variable.h(353,16): message : 参见“std::unique_ptr<torch::autograd::ViewFunc,std::default_delete<torch::autograd::ViewFunc>>”的声明
C:\libtorchInclude\torch\csrc\autograd\variable.h(423,44): warning C4251: “torch::autograd::ViewInfo::rev_view_fn_”: class“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”需要有 dll 接口由 struct“torch::autograd::ViewInfo”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\variable.h(423,8): message : 参见“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”的声明
C:\libtorchInclude\torch\csrc\autograd\variable.h(685,27): warning C4251: “torch::autograd::DifferentiableViewMeta::backward_info_”: class“std::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\variable.h(685,8): message : 参见“std::optional<torch::autograd::ViewInfo>”的声明
C:\libtorchInclude\torch\csrc\autograd\variable.h(686,27): warning C4251: “torch::autograd::DifferentiableViewMeta::forward_info_”: class“std::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\variable.h(685,8): message : 参见“std::optional<torch::autograd::ViewInfo>”的声明
C:\libtorchInclude\ATen\core\function_schema.h(311,16): warning C4251: “c10::FunctionSchema::name_”: struct“c10::OperatorName”需要有 dll 接口由 struct“c10::FunctionSchema”的客户端使用
C:\libtorchInclude\ATen\core\operator_name.h(14,8): message : 参见“c10::OperatorName”的声明
C:\libtorchInclude\ATen\core\function_schema.h(312,25): warning C4251: “c10::FunctionSchema::arguments_”: class“std::vector<c10::Argument,std::allocator<c10::Argument>>”需要有 dll 接口由 struct“c10::FunctionSchema”的客户端使用
C:\libtorchInclude\ATen\core\function_schema.h(232,12): message : 参见“std::vector<c10::Argument,std::allocator<c10::Argument>>”的声明
C:\libtorchInclude\ATen\core\function_schema.h(313,25): warning C4251: “c10::FunctionSchema::returns_”: class“std::vector<c10::Argument,std::allocator<c10::Argument>>”需要有 dll 接口由 struct“c10::FunctionSchema”的客户端使用
C:\libtorchInclude\ATen\core\function_schema.h(232,12): message : 参见“std::vector<c10::Argument,std::allocator<c10::Argument>>”的声明
C:\libtorchInclude\ATen\core\function_schema.h(325,36): warning C4251: “c10::FunctionSchema::alias_kind_”: class“std::optional<c10::AliasAnalysisKind>”需要有 dll 接口由 struct“c10::FunctionSchema”的客户端使用
C:\libtorchInclude\ATen\core\function_schema.h(325,8): message : 参见“std::optional<c10::AliasAnalysisKind>”的声明
C:\libtorchInclude\ATen\core\boxing\BoxedKernel.h(170,38): warning C4251: “c10::BoxedKernel::functor_”: class“c10::intrusive_ptr<c10::OperatorKernel,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 class“c10::BoxedKernel”的客户端使用
          with
          [
              TTarget=c10::OperatorKernel
          ]
C:\libtorchInclude\ATen\core\boxing\BoxedKernel.h(170,8): message : 参见“c10::intrusive_ptr<c10::OperatorKernel,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::OperatorKernel
          ]
C:\libtorchInclude\ATen\core\dispatch\DispatchKeyExtractor.h(230,22): warning C4251: “c10::DispatchKeyExtractor::dispatch_arg_indices_reverse_”: struct“c10::utils::bitset”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
C:\libtorchInclude\c10\util\Bitset.h(19,8): message : 参见“c10::utils::bitset”的声明
C:\libtorchInclude\ATen\core\dispatch\DispatchKeyExtractor.h(233,18): warning C4251: “c10::DispatchKeyExtractor::nonFallthroughKeys_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
C:\libtorchInclude\c10\core\DispatchKeySet.h(165,7): message : 参见“c10::DispatchKeySet”的声明
C:\libtorchInclude\ATen\core\dispatch\CppSignature.h(57,21): warning C4251: “c10::impl::CppSignature::signature_”: class“std::type_index”需要有 dll 接口由 class“c10::impl::CppSignature”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\typeindex(25,19): message : 参见“std::type_index”的声明
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(223,16): warning C4251: “c10::impl::OperatorEntry::name_”: struct“c10::OperatorName”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\libtorchInclude\ATen\core\operator_name.h(14,8): message : 参见“c10::OperatorName”的声明
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(224,34): warning C4251: “c10::impl::OperatorEntry::schema_”: class“std::optional<c10::impl::AnnotatedSchema>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(224,8): message : 参见“std::optional<c10::impl::AnnotatedSchema>”的声明
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(226,26): warning C4251: “c10::impl::OperatorEntry::tags_”: class“std::vector<at::Tag,std::allocator<at::Tag>>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(103,67): message : 参见“std::vector<at::Tag,std::allocator<at::Tag>>”的声明
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(231,22): warning C4251: “c10::impl::OperatorEntry::py_cache_”: class“c10::PyHandleCache”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\libtorchInclude\c10\core\PyHandleCache.h(38,7): message : 参见“c10::PyHandleCache”的声明
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(271,24): warning C4251: “c10::impl::OperatorEntry::kernels_”: class“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(264,8): message : 参见“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(287,40): warning C4251: “c10::impl::OperatorEntry::cpp_signature_”: class“std::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(287,8): message : 参见“std::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的声明
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(288,40): warning C4251: “c10::impl::OperatorEntry::sym_cpp_signature_”: class“std::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(287,8): message : 参见“std::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的声明
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(291,38): warning C4251: “c10::impl::OperatorEntry::report_error_callback_”: class“std::unique_ptr<c10::SafePyObject,std::default_delete<c10::SafePyObject>>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(214,37): message : 参见“std::unique_ptr<c10::SafePyObject,std::default_delete<c10::SafePyObject>>”的声明
C:\libtorchInclude\ATen\record_function.h(86,32): warning C4251: “at::StringView::owned_str_ptr_”: class“std::shared_ptr<std::string>”需要有 dll 接口由 struct“at::StringView”的客户端使用
C:\libtorchInclude\ATen\record_function.h(86,8): message : 参见“std::shared_ptr<std::string>”的声明
C:\libtorchInclude\ATen\record_function.h(475,17): warning C4251: “at::RecordFunction::step_callbacks_”: struct“at::StepCallbacks”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
C:\libtorchInclude\ATen\record_function.h(258,8): message : 参见“at::StepCallbacks”的声明
C:\libtorchInclude\ATen\record_function.h(487,23): warning C4251: “at::RecordFunction::ctx_”: class“c10::SmallVector<std::unique_ptr<at::ObserverContext,std::default_delete<at::ObserverContext>>,4>”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
C:\libtorchInclude\ATen\record_function.h(103,14): message : 参见“c10::SmallVector<std::unique_ptr<at::ObserverContext,std::default_delete<at::ObserverContext>>,4>”的声明
C:\libtorchInclude\ATen\record_function.h(489,43): warning C4251: “at::RecordFunction::fn_”: class“std::variant<std::string,at::RecordFunction::schema_ref_t>”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
C:\libtorchInclude\ATen\record_function.h(489,8): message : 参见“std::variant<std::string,at::RecordFunction::schema_ref_t>”的声明
C:\libtorchInclude\ATen\record_function.h(492,31): warning C4251: “at::RecordFunction::inputs_”: class“c10::ArrayRef<const c10::IValue>”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
C:\libtorchInclude\ATen\record_function.h(293,12): message : 参见“c10::ArrayRef<const c10::IValue>”的声明
C:\libtorchInclude\ATen\record_function.h(493,43): warning C4251: “at::RecordFunction::kwinputs_”: class“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
C:\libtorchInclude\ATen\core\function_schema.h(486,18): message : 参见“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”的声明
C:\libtorchInclude\ATen\record_function.h(494,28): warning C4251: “at::RecordFunction::outputs_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
C:\libtorchInclude\c10\core\impl\PyInterpreter.h(24,20): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\libtorchInclude\ATen\record_function.h(752,27): warning C4251: “at::RecordFunctionTLS::sorted_tls_callbacks_”: class“std::vector<at::RecordFunctionCallbacksEntry,std::allocator<at::RecordFunctionCallbacksEntry>>”需要有 dll 接口由 struct“at::RecordFunctionTLS”的客户端使用
C:\libtorchInclude\ATen\record_function.h(255,38): message : 参见“std::vector<at::RecordFunctionCallbacksEntry,std::allocator<at::RecordFunctionCallbacksEntry>>”的声明
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(332,26): warning C4251: “c10::Dispatcher::operators_”: class“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(332,8): message : 参见“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”的声明
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(334,63): warning C4251: “c10::Dispatcher::operatorLookupTable_”: class“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(334,3): message : 参见“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”的声明
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(339,48): warning C4251: “c10::Dispatcher::libraries_”: class“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
          with
          [
              K=std::string,
              V=std::string
          ]
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(339,8): message : 参见“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=std::string,
              V=std::string
          ]
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(343,53): warning C4251: “c10::Dispatcher::listeners_”: class“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(343,8): message : 参见“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”的声明
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(357,27): warning C4251: “c10::Dispatcher::cond_var_”: class“std::condition_variable”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(573,19): message : 参见“std::condition_variable”的声明
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(363,26): warning C4251: “c10::Dispatcher::guard_”: class“std::shared_ptr<c10::Dispatcher::Guard>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(363,8): message : 参见“std::shared_ptr<c10::Dispatcher::Guard>”的声明
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(508,48): warning C4251: “c10::OperatorHandle::operatorIterator_”: class“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”需要有 dll 接口由 class“c10::OperatorHandle”的客户端使用
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\list(789,39): message : 参见“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”的声明
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\libtorchInclude\ATen\core\op_registration\op_registration.h(434,63): warning C4251: “c10::RegisterOperators::Options::schemaOrName_”: class“std::optional<std::variant<c10::OperatorName,c10::FunctionSchema>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\libtorchInclude\ATen\core\op_registration\op_registration.h(434,10): message : 参见“std::optional<std::variant<c10::OperatorName,c10::FunctionSchema>>”的声明
C:\libtorchInclude\ATen\core\op_registration\op_registration.h(436,43): warning C4251: “c10::RegisterOperators::Options::kernels”: class“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\libtorchInclude\ATen\core\op_registration\op_registration.h(436,10): message : 参见“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”的声明
C:\libtorchInclude\ATen\core\op_registration\op_registration.h(437,33): warning C4251: “c10::RegisterOperators::Options::aliasAnalysisKind_”: class“std::optional<c10::AliasAnalysisKind>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\libtorchInclude\ATen\core\function_schema.h(325,8): message : 参见“std::optional<c10::AliasAnalysisKind>”的声明
C:\libtorchInclude\ATen\core\op_registration\op_registration.h(588,39): warning C4251: “c10::RegisterOperators::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“c10::RegisterOperators”的客户端使用
C:\libtorchInclude\ATen\core\op_registration\op_registration.h(588,8): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
C:\libtorchInclude\torch\library.h(302,35): warning C4251: “torch::CppFunction::dispatch_key_”: class“std::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(132,10): message : 参见“std::optional<c10::DispatchKey>”的声明
C:\libtorchInclude\torch\library.h(304,42): warning C4251: “torch::CppFunction::cpp_signature_”: class“std::optional<c10::impl::CppSignature>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(134,10): message : 参见“std::optional<c10::impl::CppSignature>”的声明
C:\libtorchInclude\torch\library.h(305,40): warning C4251: “torch::CppFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(38,42): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
C:\libtorchInclude\torch\library.h(306,15): warning C4251: “torch::CppFunction::debug_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\library.h(850,30): warning C4251: “torch::Library::ns_”: class“std::optional<std::string>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(236,8): message : 参见“std::optional<std::string>”的声明
C:\libtorchInclude\torch\library.h(851,35): warning C4251: “torch::Library::dispatch_key_”: class“std::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(132,10): message : 参见“std::optional<c10::DispatchKey>”的声明
C:\libtorchInclude\torch\library.h(852,54): warning C4251: “torch::Library::python_module_”: class“std::optional<std::pair<const char *,const char *>>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\Dispatcher.h(237,8): message : 参见“std::optional<std::pair<const char *,const char *>>”的声明
C:\libtorchInclude\torch\library.h(856,44): warning C4251: “torch::Library::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\libtorchInclude\ATen\core\op_registration\op_registration.h(588,8): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(53,11): warning C4251: “c10::ClassAttribute::attributeType_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\class_type.h(54,15): warning C4251: “c10::ClassAttribute::attributeName_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(410,28): warning C4251: “c10::ClassType::constantNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(411,23): warning C4251: “c10::ClassType::constantValues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\libtorchInclude\c10\core\impl\PyInterpreter.h(24,20): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(413,34): warning C4251: “c10::ClassType::compilation_unit_”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
          with
          [
              _Ty=torch::jit::CompilationUnit
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory(1462,23): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::CompilationUnit
          ]
C:\libtorchInclude\ATen\core\class_type.h(416,31): warning C4251: “c10::ClassType::attributes_”: class“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\libtorchInclude\ATen\core\class_type.h(320,14): message : 参见“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(419,24): warning C4251: “c10::ClassType::attributeTypes_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(582,30): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(422,38): warning C4251: “c10::ClassType::methods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\libtorchInclude\ATen\core\class_type.h(108,14): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(423,38): warning C4251: “c10::ClassType::staticmethods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\libtorchInclude\ATen\core\class_type.h(108,14): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(426,38): warning C4251: “c10::ClassType::forward_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\libtorchInclude\ATen\core\class_type.h(108,14): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(427,38): warning C4251: “c10::ClassType::forward_pre_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\libtorchInclude\ATen\core\class_type.h(108,14): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(430,25): warning C4251: “c10::ClassType::properties_”: class“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\libtorchInclude\ATen\core\class_type.h(246,14): message : 参见“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(435,15): warning C4251: “c10::ClassType::doc_string_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\ATen\core\class_type.h(438,28): warning C4251: “c10::ClassType::unresolved_class_attributes_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\torch\custom_class_detail.h(212,15): warning C4251: “torch::detail::class_base::qualClassName”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\custom_class_detail.h(213,20): warning C4251: “torch::detail::class_base::classTypePtr”: class“std::shared_ptr<c10::ClassType>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
C:\libtorchInclude\ATen\core\custom_class.h(13,27): message : 参见“std::shared_ptr<c10::ClassType>”的声明
C:\libtorchInclude\torch\csrc\autograd\anomaly_mode.h(67,15): warning C4251: “torch::autograd::AnomalyMetadata::traceback_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\autograd\anomaly_mode.h(68,25): warning C4251: “torch::autograd::AnomalyMetadata::parent_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\libtorchInclude\ATen\core\TensorBase.h(828,14): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\libtorchInclude\ATen\PythonTorchFunctionTLS.h(29,51): warning C4251: “at::impl::PythonTorchFunctionTLS::stack_”: class“std::vector<std::shared_ptr<c10::SafePyObject>,std::allocator<std::shared_ptr<c10::SafePyObject>>>”需要有 dll 接口由 struct“at::impl::PythonTorchFunctionTLS”的客户端使用
C:\libtorchInclude\ATen\PythonTorchFunctionTLS.h(29,8): message : 参见“std::vector<std::shared_ptr<c10::SafePyObject>,std::allocator<std::shared_ptr<c10::SafePyObject>>>”的声明
C:\libtorchInclude\ATen\SavedTensorHooks.h(17,47): warning C4251: “at::impl::SavedTensorDefaultHooksTLS::stack”: class“std::stack<std::pair<PyObject *,PyObject *>,std::deque<std::pair<PyObject *,PyObject *>,std::allocator<std::pair<PyObject *,PyObject *>>>>”需要有 dll 接口由 struct“at::impl::SavedTensorDefaultHooksTLS”的客户端使用
C:\libtorchInclude\ATen\SavedTensorHooks.h(17,8): message : 参见“std::stack<std::pair<PyObject *,PyObject *>,std::deque<std::pair<PyObject *,PyObject *>,std::allocator<std::pair<PyObject *,PyObject *>>>>”的声明
C:\libtorchInclude\ATen\SavedTensorHooks.h(24,30): warning C4251: “at::impl::SavedTensorDefaultHooksTLS::disabled_error_message”: class“std::optional<std::string>”需要有 dll 接口由 struct“at::impl::SavedTensorDefaultHooksTLS”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(236,8): message : 参见“std::optional<std::string>”的声明
C:\libtorchInclude\ATen\ThreadLocalPythonObjects.h(18,71): warning C4251: “at::impl::ThreadLocalPythonObjects::obj_dict_”: class“std::unordered_map<std::string,std::shared_ptr<c10::SafePyObject>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,std::shared_ptr<c10::SafePyObject>>>>”需要有 dll 接口由 struct“at::impl::ThreadLocalPythonObjects”的客户端使用
C:\libtorchInclude\ATen\ThreadLocalPythonObjects.h(18,8): message : 参见“std::unordered_map<std::string,std::shared_ptr<c10::SafePyObject>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,std::shared_ptr<c10::SafePyObject>>>>”的声明
C:\libtorchInclude\c10\core\impl\TorchDispatchModeTLS.h(52,60): warning C4251: “c10::impl::TorchDispatchModeTLS::stack_”: class“std::vector<std::shared_ptr<c10::impl::PyObject_TorchDispatchMode>,std::allocator<std::shared_ptr<c10::impl::PyObject_TorchDispatchMode>>>”需要有 dll 接口由 struct“c10::impl::TorchDispatchModeTLS”的客户端使用
C:\libtorchInclude\c10\core\impl\TorchDispatchModeTLS.h(52,8): message : 参见“std::vector<std::shared_ptr<c10::impl::PyObject_TorchDispatchMode>,std::allocator<std::shared_ptr<c10::impl::PyObject_TorchDispatchMode>>>”的声明
C:\libtorchInclude\ATen\ThreadLocalState.h(47,46): warning C4251: “at::ThreadLocalState::debug_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\libtorchInclude\c10\util\ThreadLocalDebugInfo.h(38,15): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\libtorchInclude\ATen\ThreadLocalState.h(59,54): warning C4251: “at::ThreadLocalState::functorch_tls_”: class“std::shared_ptr<const at::functorch::FuncTorchTLSBase>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\libtorchInclude\ATen\FuncTorchTLS.h(41,16): message : 参见“std::shared_ptr<const at::functorch::FuncTorchTLSBase>”的声明
C:\libtorchInclude\ATen\CPUGeneratorImpl.h(36,15): warning C4251: “at::CPUGeneratorImpl::engine_”: class“at::mt19937_engine”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\libtorchInclude\ATen\core\MT19937RNGEngine.h(110,7): message : 参见“at::mt19937_engine”的声明
C:\libtorchInclude\ATen\CPUGeneratorImpl.h(37,24): warning C4251: “at::CPUGeneratorImpl::next_float_normal_sample_”: class“std::optional<float>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\libtorchInclude\ATen\CPUGeneratorImpl.h(27,8): message : 参见“std::optional<float>”的声明
C:\libtorchInclude\ATen\CPUGeneratorImpl.h(38,25): warning C4251: “at::CPUGeneratorImpl::next_double_normal_sample_”: class“std::optional<double>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\libtorchInclude\ATen\ops\logit_ops.h(18,57): message : 参见“std::optional<double>”的声明
C:\libtorchInclude\ATen\Context.h(354,18): warning C4251: “at::Context::thc_init”: class“c10::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\libtorchInclude\c10\util\CallOnce.h(23,7): message : 参见“c10::once_flag”的声明
C:\libtorchInclude\ATen\Context.h(355,18): warning C4251: “at::Context::thh_init”: class“c10::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\libtorchInclude\c10\util\CallOnce.h(23,7): message : 参见“c10::once_flag”的声明
C:\libtorchInclude\ATen\Context.h(356,18): warning C4251: “at::Context::thx_init”: class“c10::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\libtorchInclude\c10\util\CallOnce.h(23,7): message : 参见“c10::once_flag”的声明
C:\libtorchInclude\ATen\Context.h(357,18): warning C4251: “at::Context::th_mtia_init”: class“c10::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\libtorchInclude\c10\util\CallOnce.h(23,7): message : 参见“c10::once_flag”的声明
C:\libtorchInclude\ATen\Context.h(358,18): warning C4251: “at::Context::thp_init”: class“c10::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\libtorchInclude\c10\util\CallOnce.h(23,7): message : 参见“c10::once_flag”的声明
C:\libtorchInclude\ATen\Context.h(398,30): warning C4251: “at::Context::quantized_engine”: class“std::optional<c10::QEngine>”需要有 dll 接口由 class“at::Context”的客户端使用
C:\libtorchInclude\ATen\Context.h(398,8): message : 参见“std::optional<c10::QEngine>”的声明
C:\libtorchInclude\ATen\TensorGeometry.h(137,28): warning C4251: “at::TensorGeometry::sizes_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
          with
          [
              T=c10::SymInt
          ]
C:\libtorchInclude\c10\util\ArrayRef.h(256,8): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=c10::SymInt
          ]
C:\libtorchInclude\ATen\TensorGeometry.h(138,28): warning C4251: “at::TensorGeometry::strides_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
          with
          [
              T=c10::SymInt
          ]
C:\libtorchInclude\c10\util\ArrayRef.h(256,8): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=c10::SymInt
          ]
C:\libtorchInclude\ATen\ops\from_blob.h(92,15): warning C4251: “at::TensorMaker::sizes_”: class“c10::ArrayRef<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\libtorchInclude\c10\util\ArrayRef.h(374,21): message : 参见“c10::ArrayRef<int64_t>”的声明
C:\libtorchInclude\ATen\ops\from_blob.h(93,23): warning C4251: “at::TensorMaker::strides_”: class“c10::OptionalArrayRef<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\libtorchInclude\c10\util\OptionalArrayRef.h(219,29): message : 参见“c10::OptionalArrayRef<int64_t>”的声明
C:\libtorchInclude\ATen\ops\from_blob.h(94,26): warning C4251: “at::TensorMaker::storage_offset_”: class“std::optional<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\ATen\ops\from_blob.h(95,30): warning C4251: “at::TensorMaker::deleter_”: class“std::function<void (void *)>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\libtorchInclude\c10\core\Allocator.h(227,8): message : 参见“std::function<void (void *)>”的声明
C:\libtorchInclude\ATen\ops\from_blob.h(96,41): warning C4251: “at::TensorMaker::ctx_”: class“std::unique_ptr<void,c10::DeleterFnPtr>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\libtorchInclude\c10\util\UniqueVoidPtr.h(45,8): message : 参见“std::unique_ptr<void,c10::DeleterFnPtr>”的声明
C:\libtorchInclude\ATen\ops\from_blob.h(97,25): warning C4251: “at::TensorMaker::device_”: class“std::optional<c10::Device>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\libtorchInclude\c10\core\StorageImpl.h(328,10): message : 参见“std::optional<c10::Device>”的声明
C:\libtorchInclude\ATen\NestedTensorImpl.h(174,47): warning C4251: “at::native::NestedTensorImpl::opt_sizes_”: class“std::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“at::native::NestedTensorImpl”的客户端使用
C:\libtorchInclude\ATen\core\jit_type.h(543,8): message : 参见“std::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
C:\libtorchInclude\torch\csrc\autograd\input_metadata.h(107,17): warning C4251: “torch::autograd::InputMetadata::shape_”: class“std::variant<torch::autograd::SymIntSmallVec,at::Tensor>”需要有 dll 接口由 struct“torch::autograd::InputMetadata”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\input_metadata.h(25,28): message : 参见“std::variant<torch::autograd::SymIntSmallVec,at::Tensor>”的声明
C:\libtorchInclude\torch\csrc\autograd\saved_variable.h(80,32): warning C4251: “torch::autograd::SavedVariable::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\forward_grad.h(111,25): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
C:\libtorchInclude\torch\csrc\autograd\saved_variable.h(88,23): warning C4251: “torch::autograd::SavedVariable::weak_grad_fn_”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
          with
          [
              _Ty=torch::autograd::Node
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory(1462,23): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::autograd::Node
          ]
C:\libtorchInclude\torch\csrc\autograd\saved_variable.h(103,39): warning C4251: “torch::autograd::SavedVariable::hooks_”: class“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\saved_variable.h(46,28): message : 参见“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”的声明
C:\libtorchInclude\torch\csrc\autograd\saved_variable.h(107,25): warning C4251: “torch::autograd::SavedVariable::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\libtorchInclude\ATen\core\TensorBase.h(828,14): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\libtorchInclude\torch\csrc\autograd\saved_variable.h(112,25): warning C4251: “torch::autograd::SavedVariable::grad_accumulator_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\libtorchInclude\ATen\core\TensorBase.h(828,14): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\libtorchInclude\torch\csrc\autograd\function.h(109,60): warning C4251: “std::enable_shared_from_this<torch::autograd::Node>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::Node>”的客户端使用
          with
          [
              _Ty=torch::autograd::Node
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory(1462,23): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::autograd::Node
          ]
C:\libtorchInclude\torch\csrc\autograd\function.h(655,14): warning C4251: “torch::autograd::Node::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(86,19): message : 参见“std::mutex”的声明
C:\libtorchInclude\torch\csrc\autograd\function.h(657,13): warning C4251: “torch::autograd::Node::next_edges_”: class“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\graph_task.h(11,24): message : 参见“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”的声明
C:\libtorchInclude\torch\csrc\autograd\function.h(659,36): warning C4251: “torch::autograd::Node::anomaly_metadata_”: class“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\function.h(659,8): message : 参见“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”的声明
C:\libtorchInclude\torch\csrc\autograd\function.h(671,49): warning C4251: “torch::autograd::Node::pre_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\variable.h(182,16): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”的声明
C:\libtorchInclude\torch\csrc\autograd\function.h(672,49): warning C4251: “torch::autograd::Node::tensor_pre_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\variable.h(182,16): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”的声明
C:\libtorchInclude\torch\csrc\autograd\function.h(674,7): warning C4251: “torch::autograd::Node::retains_grad_hooks_”: class“std::unordered_map<size_t,std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const size_t,std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\function.h(533,8): message : 参见“std::unordered_map<size_t,std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const size_t,std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>>”的声明
C:\libtorchInclude\torch\csrc\autograd\function.h(675,50): warning C4251: “torch::autograd::Node::post_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\function.h(473,14): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”的声明
C:\libtorchInclude\torch\csrc\autograd\function.h(676,37): warning C4251: “torch::autograd::Node::input_metadata_”: class“c10::SmallVector<torch::autograd::InputMetadata,2>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\function.h(676,7): message : 参见“c10::SmallVector<torch::autograd::InputMetadata,2>”的声明
C:\libtorchInclude\torch\csrc\autograd\function.h(200,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\libtorchInclude\torch\csrc\autograd\function.h(208,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\libtorchInclude\torch\csrc\autograd\function.h(215,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\libtorchInclude\torch\csrc\autograd\function.h(221,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\libtorchInclude\torch\csrc\autograd\function.h(306,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\libtorchInclude\torch\csrc\autograd\variable_info.h(16,28): warning C4251: “torch::autograd::VariableInfo::size”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 struct“torch::autograd::VariableInfo”的客户端使用
          with
          [
              T=c10::SymInt
          ]
C:\libtorchInclude\c10\util\ArrayRef.h(256,8): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=c10::SymInt
          ]
C:\libtorchInclude\torch\csrc\dynamo\compiled_autograd.h(419,1): warning C4267: “参数”: 从“size_t”转换到“uint16_t”，可能丢失数据
C:\libtorchInclude\torch\csrc\autograd\custom_function.h(128,47): warning C4251: “torch::autograd::AutogradContext::saved_data”: class“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<_Kty,_Ty>>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
          with
          [
              _Kty=std::string,
              _Ty=c10::IValue
          ]
C:\libtorchInclude\torch\csrc\autograd\custom_function.h(128,8): message : 参见“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<_Kty,_Ty>>>”的声明
          with
          [
              _Kty=std::string,
              _Ty=c10::IValue
          ]
C:\libtorchInclude\torch\csrc\autograd\custom_function.h(158,39): warning C4251: “torch::autograd::AutogradContext::non_differentiable_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\custom_function.h(21,16): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
C:\libtorchInclude\torch\csrc\autograd\custom_function.h(159,39): warning C4251: “torch::autograd::AutogradContext::dirty_inputs_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\custom_function.h(21,16): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
C:\libtorchInclude\torch\csrc\autograd\custom_function.h(160,47): warning C4251: “torch::autograd::AutogradContext::saved_variables_”: class“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\function.h(36,34): message : 参见“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”的声明
C:\libtorchInclude\torch\csrc\autograd\custom_function.h(161,17): warning C4251: “torch::autograd::AutogradContext::to_save_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\libtorchInclude\ATen\ops\chunk_ops.h(18,25): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\libtorchInclude\torch\csrc\autograd\custom_function.h(167,23): warning C4251: “torch::autograd::AutogradContext::grad_fn_”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
          with
          [
              _Ty=torch::autograd::Node
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory(1462,23): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::autograd::Node
          ]
C:\libtorchInclude\ATen\TensorIterator.h(141,16): warning C4251: “at::OperandInfo::stride_bytes”: class“c10::SmallVector<int64_t,6>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\libtorchInclude\ATen\TensorIterator.h(118,24): message : 参见“c10::SmallVector<int64_t,6>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(150,25): warning C4251: “at::OperandInfo::device”: class“std::optional<c10::Device>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\libtorchInclude\c10\core\StorageImpl.h(328,10): message : 参见“std::optional<c10::Device>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(224,31): warning C4251: “at::OperandInfo::tensor_base_”: class“c10::MaybeOwned<at::TensorBase>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\libtorchInclude\ATen\core\TensorBase.h(139,8): message : 参见“c10::MaybeOwned<at::TensorBase>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(225,31): warning C4251: “at::OperandInfo::original_tensor_base_”: class“c10::MaybeOwned<at::TensorBase>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\libtorchInclude\ATen\core\TensorBase.h(139,8): message : 参见“c10::MaybeOwned<at::TensorBase>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(666,13): warning C4251: “at::TensorIteratorBase::shape_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\libtorchInclude\c10\util\DimVector.h(14,19): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(676,13): warning C4251: “at::TensorIteratorBase::perm_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\libtorchInclude\c10\util\DimVector.h(14,19): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(689,13): warning C4251: “at::TensorIteratorBase::view_offsets_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\libtorchInclude\c10\util\DimVector.h(14,19): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(692,14): warning C4251: “at::TensorIteratorBase::names_”: class“c10::SmallVector<at::Dimname,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\libtorchInclude\ATen\NamedTensorUtils.h(12,20): message : 参见“c10::SmallVector<at::Dimname,5>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(703,31): warning C4251: “at::TensorIteratorBase::operands_”: class“c10::SmallVector<at::OperandInfo,4>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\libtorchInclude\ATen\TensorIterator.h(703,3): message : 参见“c10::SmallVector<at::OperandInfo,4>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(970,47): warning C4251: “at::TensorIteratorConfig::tensors_”: class“c10::SmallVector<c10::MaybeOwned<at::TensorBase>,4>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\libtorchInclude\ATen\TensorIterator.h(970,3): message : 参见“c10::SmallVector<c10::MaybeOwned<at::TensorBase>,4>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(974,28): warning C4251: “at::TensorIteratorConfig::static_shape_”: class“std::optional<c10::DimVector>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\libtorchInclude\ATen\TensorUtils.h(184,16): message : 参见“std::optional<c10::DimVector>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(975,29): warning C4251: “at::TensorIteratorConfig::static_dtype_”: class“std::optional<c10::ScalarType>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\libtorchInclude\c10\core\ScalarTypeToTypeMeta.h(30,8): message : 参见“std::optional<c10::ScalarType>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(976,25): warning C4251: “at::TensorIteratorConfig::static_device_”: class“std::optional<c10::Device>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\libtorchInclude\c10\core\StorageImpl.h(328,10): message : 参见“std::optional<c10::Device>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(989,26): warning C4251: “at::TensorIteratorConfig::const_tensor_indices_”: class“c10::SmallVector<uint64_t,4>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\libtorchInclude\ATen\record_function.h(102,14): message : 参见“c10::SmallVector<uint64_t,4>”的声明
C:\libtorchInclude\ATen\TensorIterator.h(1015,50): warning C4251: “at::SplitUntil32Bit::iterator::vec”: class“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”需要有 dll 接口由 struct“at::SplitUntil32Bit::iterator”的客户端使用
C:\libtorchInclude\ATen\TensorIterator.h(1015,10): message : 参见“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”的声明
C:\libtorchInclude\ATen\ops\index_meta.h(42,35): warning C4251: “at::meta::structured_index_Tensor::precompute_out<SIZES,STRIDES>::sizes”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::meta::structured_index_Tensor::precompute_out<SIZES,STRIDES>”的客户端使用
C:\libtorchInclude\c10\util\DimVector.h(14,19): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\libtorchInclude\ATen\ops\index_meta.h(44,14): message : 查看对正在编译的 类 模板 实例化“at::meta::structured_index_Tensor::precompute_out<SIZES,STRIDES>”的引用
C:\libtorchInclude\ATen\ops\index_meta.h(43,15): warning C4251: “at::meta::structured_index_Tensor::precompute_out<SIZES,STRIDES>::strides”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::meta::structured_index_Tensor::precompute_out<SIZES,STRIDES>”的客户端使用
C:\libtorchInclude\c10\util\DimVector.h(14,19): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\data\samplers\distributed.h(101,23): warning C4251: “torch::data::samplers::DistributedRandomSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedRandomSampler”的客户端使用
          with
          [
              T=size_t
          ]
C:\libtorchInclude\c10\util\ArrayRef.h(256,8): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=size_t
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\data\samplers\distributed.h(134,23): warning C4251: “torch::data::samplers::DistributedSequentialSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedSequentialSampler”的客户端使用
          with
          [
              T=size_t
          ]
C:\libtorchInclude\c10\util\ArrayRef.h(256,8): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=size_t
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\imethod.h(50,36): warning C4251: “torch::IMethod::argumentNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::IMethod”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\attributes.h(128,52): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphAttr”的基
C:\libtorchInclude\torch\csrc\jit\ir\attributes.h(57,8): message : 参见“torch::jit::AttributeValue”的声明
C:\libtorchInclude\torch\csrc\jit\ir\attributes.h(128,18): message : 参见“torch::jit::GraphAttr”的声明
C:\libtorchInclude\torch\csrc\jit\ir\attributes.h(142,26): warning C4251: “torch::jit::GraphAttr::value_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphAttr”的客户端使用
C:\libtorchInclude\ATen\core\function.h(32,10): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\attributes.h(145,53): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphsAttr”的基
C:\libtorchInclude\torch\csrc\jit\ir\attributes.h(57,8): message : 参见“torch::jit::AttributeValue”的声明
C:\libtorchInclude\torch\csrc\jit\ir\attributes.h(145,18): message : 参见“torch::jit::GraphsAttr”的声明
C:\libtorchInclude\torch\csrc\jit\ir\attributes.h(160,13): warning C4251: “torch::jit::GraphsAttr::value_”: class“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”需要有 dll 接口由 struct“torch::jit::GraphsAttr”的客户端使用
C:\libtorchInclude\torch\csrc\jit\ir\attributes.h(146,32): message : 参见“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(176,33): warning C4251: “torch::jit::StringCordView::pieces_”: class“std::vector<c10::string_view,std::allocator<c10::string_view>>”需要有 dll 接口由 struct“torch::jit::StringCordView”的客户端使用
C:\libtorchInclude\ATen\core\dynamic_type.h(141,26): message : 参见“std::vector<c10::string_view,std::allocator<c10::string_view>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(177,23): warning C4251: “torch::jit::StringCordView::accumulated_sizes_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 struct“torch::jit::StringCordView”的客户端使用
          with
          [
              T=size_t
          ]
C:\libtorchInclude\c10\util\ArrayRef.h(256,8): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=size_t
          ]
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(178,45): warning C4251: “torch::jit::StringCordView::owned_strings_”: class“std::vector<std::shared_ptr<std::string>,std::allocator<std::shared_ptr<std::string>>>”需要有 dll 接口由 struct“torch::jit::StringCordView”的客户端使用
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(28,12): message : 参见“std::vector<std::shared_ptr<std::string>,std::allocator<std::shared_ptr<std::string>>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(294,30): warning C4251: “torch::jit::Source::filename_”: class“std::optional<std::string>”需要有 dll 接口由 struct“torch::jit::Source”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(236,8): message : 参见“std::optional<std::string>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(299,23): warning C4251: “torch::jit::Source::line_starting_offsets_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 struct“torch::jit::Source”的客户端使用
          with
          [
              T=size_t
          ]
C:\libtorchInclude\c10\util\ArrayRef.h(256,8): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=size_t
          ]
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(301,41): warning C4251: “torch::jit::Source::gen_ranges_”: class“std::shared_ptr<torch::jit::SourceRangeUnpickler>”需要有 dll 接口由 struct“torch::jit::Source”的客户端使用
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(195,12): message : 参见“std::shared_ptr<torch::jit::SourceRangeUnpickler>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(392,27): warning C4251: “torch::jit::SourceRange::source_view_”: class“std::shared_ptr<torch::jit::Source>”需要有 dll 接口由 struct“torch::jit::SourceRange”的客户端使用
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(307,20): message : 参见“std::shared_ptr<torch::jit::Source>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(397,28): warning C4251: “torch::jit::SourceRange::start_iter_”: struct“torch::jit::StringCordView::Iterator”需要有 dll 接口由 struct“torch::jit::SourceRange”的客户端使用
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(64,10): message : 参见“torch::jit::StringCordView::Iterator”的声明
C:\libtorchInclude\torch\csrc\jit\ir\scope.h(32,12): warning C4251: “torch::jit::Scope::parent_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Scope”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\libtorchInclude\torch\csrc\jit\ir\scope.h(27,23): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\libtorchInclude\torch\csrc\jit\ir\scope.h(127,38): warning C4251: “torch::jit::InlinedCallStack::callee_”: class“std::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\libtorchInclude\torch\csrc\jit\ir\scope.h(127,8): message : 参见“std::optional<torch::jit::InlinedCallStackPtr>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\scope.h(137,21): warning C4251: “torch::jit::InlinedCallStack::fn_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\scope.h(140,37): warning C4251: “torch::jit::InlinedCallStack::module_instance_info_”: class“std::optional<torch::jit::ModuleInstanceInfo>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\libtorchInclude\torch\csrc\jit\ir\scope.h(123,45): message : 参见“std::optional<torch::jit::ModuleInstanceInfo>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\constants.h(21,75): warning C4275: 非 dll 接口 class“std::runtime_error”用作 dll 接口 struct“torch::jit::constant_not_supported_error”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\stdexcept(101,19): message : 参见“std::runtime_error”的声明
C:\libtorchInclude\torch\csrc\jit\ir\constants.h(21,18): message : 参见“torch::jit::constant_not_supported_error”的声明
C:\libtorchInclude\torch\csrc\jit\runtime\operator.h(260,46): warning C4251: “torch::jit::Operator::op_”: class“std::variant<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”需要有 dll 接口由 struct“torch::jit::Operator”的客户端使用
C:\libtorchInclude\torch\csrc\jit\runtime\operator.h(260,8): message : 参见“std::variant<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”的声明
C:\libtorchInclude\torch\csrc\utils\schema_info.h(95,43): warning C4251: “torch::utils::SchemaInfo::wildcard_set_”: class“std::unordered_set<c10::SchemaArgument,std::hash<c10::SchemaArgument>,std::equal_to<c10::SchemaArgument>,std::allocator<c10::SchemaArgument>>”需要有 dll 接口由 struct“torch::utils::SchemaInfo”的客户端使用
C:\libtorchInclude\torch\csrc\utils\schema_info.h(90,14): message : 参见“std::unordered_set<c10::SchemaArgument,std::hash<c10::SchemaArgument>,std::equal_to<c10::SchemaArgument>,std::allocator<c10::SchemaArgument>>”的声明
C:\libtorchInclude\torch\csrc\utils\schema_info.h(98,43): warning C4251: “torch::utils::SchemaInfo::container_set_”: class“std::unordered_set<c10::SchemaArgument,std::hash<c10::SchemaArgument>,std::equal_to<c10::SchemaArgument>,std::allocator<c10::SchemaArgument>>”需要有 dll 接口由 struct“torch::utils::SchemaInfo”的客户端使用
C:\libtorchInclude\torch\csrc\utils\schema_info.h(90,14): message : 参见“std::unordered_set<c10::SchemaArgument,std::hash<c10::SchemaArgument>,std::equal_to<c10::SchemaArgument>,std::allocator<c10::SchemaArgument>>”的声明
C:\libtorchInclude\torch\csrc\utils\schema_info.h(101,47): warning C4251: “torch::utils::SchemaInfo::value_map_”: class“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”需要有 dll 接口由 struct“torch::utils::SchemaInfo”的客户端使用
C:\libtorchInclude\ATen\core\function_schema.h(486,18): message : 参见“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”的声明
C:\libtorchInclude\torch\csrc\utils\schema_info.h(104,43): warning C4251: “torch::utils::SchemaInfo::input_alias_map_”: class“std::vector<std::unordered_set<size_t,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<T>>,std::allocator<std::unordered_set<size_t,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<T>>>>”需要有 dll 接口由 struct“torch::utils::SchemaInfo”的客户端使用
          with
          [
              T=size_t
          ]
C:\libtorchInclude\torch\csrc\utils\schema_info.h(104,8): message : 参见“std::vector<std::unordered_set<size_t,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<T>>,std::allocator<std::unordered_set<size_t,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<T>>>>”的声明
          with
          [
              T=size_t
          ]
C:\libtorchInclude\torch\csrc\utils\schema_info.h(107,43): warning C4251: “torch::utils::SchemaInfo::output_alias_map_”: class“std::vector<std::unordered_set<size_t,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<T>>,std::allocator<std::unordered_set<size_t,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<T>>>>”需要有 dll 接口由 struct“torch::utils::SchemaInfo”的客户端使用
          with
          [
              T=size_t
          ]
C:\libtorchInclude\torch\csrc\utils\schema_info.h(104,8): message : 参见“std::vector<std::unordered_set<size_t,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<T>>,std::allocator<std::unordered_set<size_t,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<T>>>>”的声明
          with
          [
              T=size_t
          ]
C:\libtorchInclude\ATen\core\enum_type.h(96,11): warning C4251: “c10::EnumType::value_type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\ATen\core\enum_type.h(97,30): warning C4251: “c10::EnumType::enum_names_values_”: class“std::vector<c10::EnumNameValue,std::allocator<std::pair<_Kty,_Ty>>>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
          with
          [
              _Kty=std::string,
              _Ty=c10::IValue
          ]
C:\libtorchInclude\ATen\core\enum_type.h(19,12): message : 参见“std::vector<c10::EnumNameValue,std::allocator<std::pair<_Kty,_Ty>>>”的声明
          with
          [
              _Kty=std::string,
              _Ty=c10::IValue
          ]
C:\libtorchInclude\ATen\core\enum_type.h(98,48): warning C4251: “c10::EnumType::cu_”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
          with
          [
              _Ty=torch::jit::CompilationUnit
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory(1462,23): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::CompilationUnit
          ]
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(329,23): warning C4251: “torch::jit::Node::inputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(150,25): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(330,23): warning C4251: “torch::jit::Node::outputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(150,25): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(332,23): warning C4251: “torch::jit::Node::blocks_”: class“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(332,8): message : 参见“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(335,30): warning C4251: “torch::jit::Node::source_range_”: class“std::optional<torch::jit::SourceRange>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(277,8): message : 参见“std::optional<torch::jit::SourceRange>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(336,12): warning C4251: “torch::jit::Node::scope_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\libtorchInclude\torch\csrc\jit\ir\scope.h(27,23): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(337,38): warning C4251: “torch::jit::Node::callstack_”: class“std::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\libtorchInclude\torch\csrc\jit\ir\scope.h(127,8): message : 参见“std::optional<torch::jit::InlinedCallStackPtr>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(345,31): warning C4251: “torch::jit::Node::wrap_”: class“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(345,8): message : 参见“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(351,30): warning C4251: “torch::jit::Node::historic_schema_name_”: class“std::optional<std::string>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(236,8): message : 参见“std::optional<std::string>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(959,22): warning C4251: “torch::jit::Node::values_”: class“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(959,8): message : 参见“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(1574,45): warning C4251: “torch::jit::ProfileIValueOp::callback_”: class“std::function<void (torch::jit::Stack &)>”需要有 dll 接口由 struct“torch::jit::ProfileIValueOp”的客户端使用
C:\libtorchInclude\ATen\core\stack.h(19,46): message : 参见“std::function<void (torch::jit::Stack &)>”的声明
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(1652,70): warning C4251: “torch::jit::OperatorSet::ops”: class“std::unordered_map<c10::Symbol,std::vector<std::shared_ptr<torch::jit::Operator>,std::allocator<std::shared_ptr<torch::jit::Operator>>>,std::hash<c10::Symbol>,std::equal_to<c10::Symbol>,std::allocator<std::pair<const c10::Symbol,std::vector<std::shared_ptr<torch::jit::Operator>,std::allocator<std::shared_ptr<torch::jit::Operator>>>>>>”需要有 dll 接口由 struct“torch::jit::OperatorSet”的客户端使用
C:\libtorchInclude\torch\csrc\jit\ir\ir.h(1652,8): message : 参见“std::unordered_map<c10::Symbol,std::vector<std::shared_ptr<torch::jit::Operator>,std::allocator<std::shared_ptr<torch::jit::Operator>>>,std::hash<c10::Symbol>,std::equal_to<c10::Symbol>,std::allocator<std::pair<const c10::Symbol,std::vector<std::shared_ptr<torch::jit::Operator>,std::allocator<std::shared_ptr<torch::jit::Operator>>>>>>”的声明
C:\libtorchInclude\torch\csrc\jit\runtime\argument_spec.h(210,21): warning C4251: “torch::jit::ArgumentSpecCreator::instructions_”: class“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”需要有 dll 接口由 struct“torch::jit::ArgumentSpecCreator”的客户端使用
C:\libtorchInclude\torch\csrc\jit\runtime\argument_spec.h(210,8): message : 参见“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”的声明
C:\libtorchInclude\torch\csrc\jit\runtime\argument_spec.h(250,1): warning C4267: “初始化”: 从“size_t”转换到“int32_t”，可能丢失数据
C:\libtorchInclude\torch\csrc\jit\runtime\argument_spec.h(250,1): warning C4267: “初始化”: 从“size_t”转换到“const int32_t”，可能丢失数据
C:\libtorchInclude\torch\csrc\jit\runtime\argument_spec.h(255,33): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
C:\libtorchInclude\torch\csrc\jit\runtime\argument_spec.h(281,37): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
C:\libtorchInclude\torch\csrc\jit\runtime\argument_spec.h(460,40): warning C4267: “参数”: 从“size_t”转换到“const int”，可能丢失数据
C:\libtorchInclude\torch\csrc\jit\runtime\interpreter.h(74,42): warning C4251: “torch::jit::Code::pImpl”: class“std::shared_ptr<torch::jit::interpreter::CodeImpl>”需要有 dll 接口由 struct“torch::jit::Code”的客户端使用
C:\libtorchInclude\torch\csrc\jit\runtime\interpreter.h(74,8): message : 参见“std::shared_ptr<torch::jit::interpreter::CodeImpl>”的声明
C:\libtorchInclude\torch\csrc\jit\runtime\graph_executor.h(98,42): warning C4251: “torch::jit::GraphExecutor::pImpl”: class“std::shared_ptr<torch::jit::GraphExecutorImplBase>”需要有 dll 接口由 struct“torch::jit::GraphExecutor”的客户端使用
C:\libtorchInclude\torch\csrc\jit\runtime\graph_executor.h(98,8): message : 参见“std::shared_ptr<torch::jit::GraphExecutorImplBase>”的声明
C:\libtorchInclude\torch\csrc\jit\api\function_impl.h(136,22): warning C4251: “torch::jit::GraphFunction::name_”: struct“c10::QualifiedName”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\libtorchInclude\ATen\core\qualified_name.h(12,8): message : 参见“c10::QualifiedName”的声明
C:\libtorchInclude\torch\csrc\jit\api\function_impl.h(138,26): warning C4251: “torch::jit::GraphFunction::graph_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\libtorchInclude\ATen\core\function.h(32,10): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
C:\libtorchInclude\torch\csrc\jit\api\function_impl.h(142,48): warning C4251: “torch::jit::GraphFunction::executor_execution_mode_”: class“std::optional<torch::jit::ExecutorExecutionMode>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\libtorchInclude\torch\csrc\jit\api\function_impl.h(15,12): message : 参见“std::optional<torch::jit::ExecutorExecutionMode>”的声明
C:\libtorchInclude\torch\csrc\jit\api\function_impl.h(156,32): warning C4251: “torch::jit::GraphFunction::compile_mutex”: class“std::recursive_mutex”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(95,19): message : 参见“std::recursive_mutex”的声明
C:\libtorchInclude\torch\csrc\jit\api\function_impl.h(168,39): warning C4251: “torch::jit::GraphFunction::function_creator_”: class“std::function<void (torch::jit::GraphFunction &)>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\libtorchInclude\torch\csrc\jit\api\function_impl.h(14,12): message : 参见“std::function<void (torch::jit::GraphFunction &)>”的声明
C:\libtorchInclude\torch\csrc\jit\api\function_impl.h(173,43): warning C4251: “torch::jit::GraphFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\libtorchInclude\ATen\core\dispatch\OperatorEntry.h(38,42): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
C:\libtorchInclude\torch\csrc\jit\api\method.h(72,13): warning C4251: “torch::jit::Method::owner_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Method”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\libtorchInclude\ATen\core\ivalue.h(826,15): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\libtorchInclude\torch\csrc\jit\api\object.h(192,21): warning C4251: “torch::jit::Object::_ivalue_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Object”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\libtorchInclude\ATen\core\ivalue.h(826,15): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\libtorchInclude\torch\csrc\jit\api\compilation_unit.h(318,42): warning C4251: “torch::jit::CompilationUnit::functions_”: class“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\libtorchInclude\torch\csrc\jit\api\compilation_unit.h(318,8): message : 参见“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”的声明
C:\libtorchInclude\torch\csrc\jit\api\compilation_unit.h(320,50): warning C4251: “torch::jit::CompilationUnit::dict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\libtorchInclude\torch\csrc\jit\api\compilation_unit.h(320,8): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
C:\libtorchInclude\torch\csrc\jit\api\compilation_unit.h(321,50): warning C4251: “torch::jit::CompilationUnit::classDict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\libtorchInclude\torch\csrc\jit\api\compilation_unit.h(320,8): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
C:\libtorchInclude\torch\csrc\jit\api\compilation_unit.h(328,34): warning C4251: “torch::jit::CompilationUnit::classes_”: class“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\libtorchInclude\torch\csrc\jit\api\compilation_unit.h(328,8): message : 参见“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”的声明
C:\libtorchInclude\torch\csrc\jit\api\module.h(323,25): warning C4251: “torch::jit::Module::mem_to_delete_”: class“std::shared_ptr<char>”需要有 dll 接口由 struct“torch::jit::Module”的客户端使用
C:\libtorchInclude\torch\csrc\jit\api\module.h(274,31): message : 参见“std::shared_ptr<char>”的声明
C:\libtorchInclude\torch\csrc\jit\api\module.h(326,50): warning C4251: “torch::jit::Module::traced_inputs_”: class“c10::Dict<std::string,c10::impl::GenericList>”需要有 dll 接口由 struct“torch::jit::Module”的客户端使用
C:\libtorchInclude\torch\csrc\jit\api\module.h(295,8): message : 参见“c10::Dict<std::string,c10::impl::GenericList>”的声明
C:\libtorchInclude\torch\csrc\jit\api\module.h(329,31): warning C4251: “torch::jit::Module::register_mutex_”: class“std::shared_ptr<std::mutex>”需要有 dll 接口由 struct“torch::jit::Module”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\condition_variable(249,5): message : 参见“std::shared_ptr<std::mutex>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\serialize\input-archive.h(114,15): warning C4251: “torch::serialize::InputArchive::hierarchy_prefix_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::serialize::InputArchive”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\serialize\output-archive.h(78,41): warning C4251: “torch::serialize::OutputArchive::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 class“torch::serialize::OutputArchive”的客户端使用
C:\libtorchInclude\ATen\core\ivalue.h(1504,22): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\module.h(64,70): warning C4251: “std::enable_shared_from_this<torch::nn::Module>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::nn::Module>”的客户端使用
          with
          [
              _Ty=torch::nn::Module
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory(1462,23): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::nn::Module
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\module.h(553,36): warning C4251: “torch::nn::Module::parameters_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\module.h(216,3): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\module.h(601,36): warning C4251: “torch::nn::Module::buffers_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\module.h(216,3): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\module.h(604,53): warning C4251: “torch::nn::Module::children_”: class“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\module.h(252,3): message : 参见“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\module.h(607,33): warning C4251: “torch::nn::Module::name_”: class“std::optional<std::string>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(236,8): message : 参见“std::optional<std::string>”的声明
C:\libtorchInclude\torch\csrc\profiler\orchestration\observer.h(57,28): warning C4251: “torch::profiler::impl::ExperimentalConfig::profiler_metrics”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“torch::profiler::impl::ExperimentalConfig”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\torch\csrc\profiler\orchestration\observer.h(64,28): warning C4251: “torch::profiler::impl::ExperimentalConfig::performance_events”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“torch::profiler::impl::ExperimentalConfig”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\torch\csrc\profiler\orchestration\observer.h(146,14): warning C4251: “torch::profiler::impl::ProfilerStateBase::state_mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::profiler::impl::ProfilerStateBase”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(86,19): message : 参见“std::mutex”的声明
C:\libtorchInclude\torch\csrc\profiler\util.h(74,15): warning C4251: “torch::profiler::impl::FileLineFunc::filename”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::profiler::impl::FileLineFunc”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\profiler\util.h(76,15): warning C4251: “torch::profiler::impl::FileLineFunc::funcname”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::profiler::impl::FileLineFunc”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(68,56): warning C4251: “torch::autograd::profiler::KinetoEvent::result_”: class“std::shared_ptr<const torch::profiler::impl::Result>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(26,18): message : 参见“std::shared_ptr<const torch::profiler::impl::Result>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(69,28): warning C4251: “torch::autograd::profiler::KinetoEvent::python_stack_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(72,37): warning C4251: “torch::autograd::profiler::KinetoEvent::shapes_”: class“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\libtorchInclude\ATen\WrapDimUtils.h(32,16): message : 参见“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(73,28): warning C4251: “torch::autograd::profiler::KinetoEvent::dtypes_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(74,28): warning C4251: “torch::autograd::profiler::KinetoEvent::concrete_inputs_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\libtorchInclude\c10\core\impl\PyInterpreter.h(24,20): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(106,28): warning C4251: “torch::autograd::profiler::ProfilerResult::events_”: class“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(84,12): message : 参见“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(107,72): warning C4251: “torch::autograd::profiler::ProfilerResult::trace_”: class“std::unique_ptr<torch::profiler::impl::kineto::ActivityTraceWrapper,std::default_delete<torch::profiler::impl::kineto::ActivityTraceWrapper>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(85,12): message : 参见“std::unique_ptr<torch::profiler::impl::kineto::ActivityTraceWrapper,std::default_delete<torch::profiler::impl::kineto::ActivityTraceWrapper>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(108,37): warning C4251: “torch::autograd::profiler::ProfilerResult::event_tree_”: class“std::vector<torch::autograd::profiler::experimental_event_t,std::allocator<torch::autograd::profiler::experimental_event_t>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\profiler_kineto.h(87,12): message : 参见“std::vector<torch::autograd::profiler::experimental_event_t,std::allocator<torch::autograd::profiler::experimental_event_t>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_legacy.h(259,37): warning C4251: “torch::autograd::profiler::LegacyEvent::shapes_”: class“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\libtorchInclude\ATen\WrapDimUtils.h(32,16): message : 参见“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_legacy.h(263,48): warning C4251: “torch::autograd::profiler::LegacyEvent::cuda_event”: class“std::shared_ptr<void>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\libtorchInclude\torch\csrc\profiler\stubs\base.h(20,36): message : 参见“std::shared_ptr<void>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_legacy.h(270,28): warning C4251: “torch::autograd::profiler::LegacyEvent::stack_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_legacy.h(274,48): warning C4251: “torch::autograd::profiler::LegacyEvent::extra_args_”: class“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\libtorchInclude\ATen\core\function_schema.h(486,18): message : 参见“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_legacy.h(363,34): warning C4251: “torch::autograd::profiler::RecordProfile::file_”: class“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”需要有 dll 接口由 struct“torch::autograd::profiler::RecordProfile”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\profiler_legacy.h(363,8): message : 参见“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_legacy.h(400,65): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::cb_”: class“std::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\profiler_legacy.h(379,12): message : 参见“std::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的声明
C:\libtorchInclude\torch\csrc\autograd\profiler_legacy.h(402,47): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::profilerDisableOptions_”: class“std::optional<torch::autograd::profiler::ProfilerDisableOptions>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\profiler_legacy.h(338,10): message : 参见“std::optional<torch::autograd::profiler::ProfilerDisableOptions>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\batchnorm.h(24,3): warning C4251: “torch::nn::BatchNormOptions::momentum_”: class“std::optional<double>”需要有 dll 接口由 struct“torch::nn::BatchNormOptions”的客户端使用
C:\libtorchInclude\ATen\ops\logit_ops.h(18,57): message : 参见“std::optional<double>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\batchnorm.h(85,3): warning C4251: “torch::nn::functional::BatchNormFuncOptions::momentum_”: class“std::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::BatchNormFuncOptions”的客户端使用
C:\libtorchInclude\ATen\ops\logit_ops.h(18,57): message : 参见“std::optional<double>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(31,3): warning C4251: “torch::nn::EmbeddingOptions::padding_idx_”: class“std::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(34,3): warning C4251: “torch::nn::EmbeddingOptions::max_norm_”: class“std::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
C:\libtorchInclude\ATen\ops\logit_ops.h(18,57): message : 参见“std::optional<double>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(58,3): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::padding_idx_”: class“std::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(61,3): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::max_norm_”: class“std::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
C:\libtorchInclude\ATen\ops\logit_ops.h(18,57): message : 参见“std::optional<double>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(87,3): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::padding_idx_”: class“std::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(90,3): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::max_norm_”: class“std::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
C:\libtorchInclude\ATen\ops\logit_ops.h(18,57): message : 参见“std::optional<double>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(123,3): warning C4251: “torch::nn::EmbeddingBagOptions::max_norm_”: class“std::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\libtorchInclude\ATen\ops\logit_ops.h(18,57): message : 参见“std::optional<double>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(134,3): warning C4251: “torch::nn::EmbeddingBagOptions::mode_”: class“std::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(104,14): message : 参见“std::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(151,3): warning C4251: “torch::nn::EmbeddingBagOptions::padding_idx_”: class“std::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(164,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::max_norm_”: class“std::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\libtorchInclude\ATen\ops\logit_ops.h(18,57): message : 参见“std::optional<double>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(175,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::mode_”: class“std::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(104,14): message : 参见“std::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(187,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::padding_idx_”: class“std::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(208,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::max_norm_”: class“std::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\libtorchInclude\ATen\ops\logit_ops.h(18,57): message : 参见“std::optional<double>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(219,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::mode_”: class“std::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(104,14): message : 参见“std::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\embedding.h(236,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::padding_idx_”: class“std::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\embedding.h(52,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\embedding.h(52,48): warning C4244: “参数”: 从“_Ty”转换到“float”，可能丢失数据
          with
          [
              _Ty=double
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\embedding.h(154,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\embedding.h(154,48): warning C4244: “参数”: 从“_Ty”转换到“float”，可能丢失数据
          with
          [
              _Ty=double
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\fold.h(26,3): warning C4251: “torch::nn::FoldOptions::output_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\fold.h(29,3): warning C4251: “torch::nn::FoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\fold.h(33,3): warning C4251: “torch::nn::FoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\fold.h(37,3): warning C4251: “torch::nn::FoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\fold.h(40,3): warning C4251: “torch::nn::FoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\fold.h(70,3): warning C4251: “torch::nn::UnfoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\fold.h(74,3): warning C4251: “torch::nn::UnfoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\fold.h(78,3): warning C4251: “torch::nn::UnfoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\fold.h(81,3): warning C4251: “torch::nn::UnfoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\activation.h(107,3): warning C4251: “torch::nn::GELUOptions::approximate_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::nn::GELUOptions”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\activation.h(255,3): warning C4251: “torch::nn::functional::SoftmaxFuncOptions::dtype_”: class“std::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftmaxFuncOptions”的客户端使用
C:\libtorchInclude\c10\core\ScalarTypeToTypeMeta.h(30,8): message : 参见“std::optional<c10::ScalarType>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\activation.h(296,3): warning C4251: “torch::nn::functional::SoftminFuncOptions::dtype_”: class“std::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftminFuncOptions”的客户端使用
C:\libtorchInclude\c10\core\ScalarTypeToTypeMeta.h(30,8): message : 参见“std::optional<c10::ScalarType>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\activation.h(337,3): warning C4251: “torch::nn::functional::LogSoftmaxFuncOptions::dtype_”: class“std::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::LogSoftmaxFuncOptions”的客户端使用
C:\libtorchInclude\c10\core\ScalarTypeToTypeMeta.h(30,8): message : 参见“std::optional<c10::ScalarType>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\linear.h(64,3): warning C4251: “torch::nn::UnflattenOptions::dimname_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\linear.h(66,3): warning C4251: “torch::nn::UnflattenOptions::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\linear.h(68,3): warning C4251: “torch::nn::UnflattenOptions::namedshape_”: class“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\linear.h(55,16): message : 参见“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\activation.h(711,18): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\activation.h(733,16): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\activation.h(743,26): warning C4244: “=”: 从“T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(24,3): warning C4251: “torch::nn::L1LossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::L1LossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(68,3): warning C4251: “torch::nn::KLDivLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”需要有 dll 接口由 struct“torch::nn::KLDivLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(51,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(105,3): warning C4251: “torch::nn::MSELossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MSELossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(138,3): warning C4251: “torch::nn::BCELossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCELossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(173,3): warning C4251: “torch::nn::HingeEmbeddingLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HingeEmbeddingLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(218,3): warning C4251: “torch::nn::MultiMarginLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiMarginLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(253,3): warning C4251: “torch::nn::CosineEmbeddingLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CosineEmbeddingLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(294,3): warning C4251: “torch::nn::MultiLabelMarginLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelMarginLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(335,3): warning C4251: “torch::nn::SoftMarginLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SoftMarginLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(375,3): warning C4251: “torch::nn::MultiLabelSoftMarginLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelSoftMarginLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(417,3): warning C4251: “torch::nn::TripletMarginLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(453,3): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::distance_function_”: class“std::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(453,3): message : 参见“std::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(467,3): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(502,3): warning C4251: “torch::nn::CTCLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CTCLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(547,3): warning C4251: “torch::nn::SmoothL1LossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SmoothL1LossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(551,3): warning C4251: “torch::nn::SmoothL1LossOptions::beta_”: class“std::optional<double>”需要有 dll 接口由 struct“torch::nn::SmoothL1LossOptions”的客户端使用
C:\libtorchInclude\ATen\ops\logit_ops.h(18,57): message : 参见“std::optional<double>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(591,3): warning C4251: “torch::nn::HuberLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HuberLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(634,3): warning C4251: “torch::nn::PoissonNLLLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::PoissonNLLLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(668,3): warning C4251: “torch::nn::MarginRankingLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MarginRankingLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(706,3): warning C4251: “torch::nn::NLLLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::NLLLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(744,3): warning C4251: “torch::nn::CrossEntropyLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CrossEntropyLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(780,3): warning C4251: “torch::nn::BCEWithLogitsLossOptions::reduction_”: class“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCEWithLogitsLossOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\loss.h(18,16): message : 参见“std::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(25,3): warning C4251: “torch::nn::ReflectionPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<D>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(15,24): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(26,2): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<D>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(68,3): warning C4251: “torch::nn::ReplicationPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<D>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(15,24): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(69,2): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<D>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(110,3): warning C4251: “torch::nn::ZeroPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ZeroPadOptions<D>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(15,24): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(111,2): message : 查看对正在编译的 类 模板 实例化“torch::nn::ZeroPadOptions<D>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(154,3): warning C4251: “torch::nn::ConstantPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<D>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(15,24): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(158,2): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<D>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(207,3): warning C4251: “torch::nn::functional::PadFuncOptions::pad_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(210,3): warning C4251: “torch::nn::functional::PadFuncOptions::mode_”: class“std::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(197,16): message : 参见“std::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\pooling.h(1060,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\pooling.h(1061,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\pooling.h(1109,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\pooling.h(1110,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\pooling.h(1111,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\normalization.h(21,3): warning C4251: “torch::nn::LayerNormOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::LayerNormOptions”的客户端使用
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\normalization.h(45,3): warning C4251: “torch::nn::functional::LayerNormFuncOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::LayerNormFuncOptions”的客户端使用
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\normalization.h(136,3): warning C4251: “torch::nn::functional::NormalizeFuncOptions::out_”: class“std::optional<at::Tensor>”需要有 dll 接口由 struct“torch::nn::functional::NormalizeFuncOptions”的客户端使用
C:\libtorchInclude\ATen\ops\_backward_ops.h(18,73): message : 参见“std::optional<at::Tensor>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(23,3): warning C4251: “torch::nn::UpsampleOptions::size_”: class“std::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\libtorchInclude\ATen\core\jit_type.h(543,8): message : 参见“std::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(26,3): warning C4251: “torch::nn::UpsampleOptions::scale_factor_”: class“std::optional<std::vector<T,std::allocator<T>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
          with
          [
              T=double
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(26,3): message : 参见“std::optional<std::vector<T,std::allocator<T>>>”的声明
          with
          [
              T=double
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(37,3): warning C4251: “torch::nn::UpsampleOptions::mode_”: class“std::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(30,16): message : 参见“std::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(43,3): warning C4251: “torch::nn::UpsampleOptions::align_corners_”: class“std::optional<bool>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(218,16): message : 参见“std::optional<bool>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(68,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::size_”: class“std::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\libtorchInclude\ATen\core\jit_type.h(543,8): message : 参见“std::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(71,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::scale_factor_”: class“std::optional<std::vector<T,std::allocator<T>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
          with
          [
              T=double
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(26,3): message : 参见“std::optional<std::vector<T,std::allocator<T>>>”的声明
          with
          [
              T=double
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(75,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::mode_”: class“std::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea,torch::enumtype::kNearestExact>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(57,16): message : 参见“std::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea,torch::enumtype::kNearestExact>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(86,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::align_corners_”: class“std::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(218,16): message : 参见“std::optional<bool>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\upsampling.h(98,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::recompute_scale_factor_”: class“std::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(218,16): message : 参见“std::optional<bool>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\vision.h(27,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::mode_”: class“std::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\vision.h(21,16): message : 参见“std::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\vision.h(29,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::padding_mode_”: class“std::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\vision.h(23,7): message : 参见“std::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\vision.h(31,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::align_corners_”: class“std::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(218,16): message : 参见“std::optional<bool>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\functional.h(95,12): warning C4251: “torch::nn::FunctionalImpl::function_”: class“std::function<at::Tensor (at::Tensor)>”需要有 dll 接口由 class“torch::nn::FunctionalImpl”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\custom_function.h(17,33): message : 参见“std::function<at::Tensor (at::Tensor)>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\activation.h(860,10): warning C4251: “torch::nn::MultiheadAttentionImpl::out_proj”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::MultiheadAttentionImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\linear.h(83,1): message : 参见“torch::nn::Linear”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\adaptive.h(30,3): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossOptions::cutoffs_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::AdaptiveLogSoftmaxWithLossOptions”的客户端使用
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\adaptive.h(85,24): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::cutoffs”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\adaptive.h(95,10): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::head”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\linear.h(83,1): message : 参见“torch::nn::Linear”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\adaptive.h(97,14): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::tail”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(271,1): message : 参见“torch::nn::ModuleList”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(181,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(27,31): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(181,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(213,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(27,31): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(213,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(248,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(27,31): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(248,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(340,58): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(27,31): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(340,58): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(382,58): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(27,31): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(382,58): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(424,58): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(27,31): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\conv.h(424,58): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
C:\libtorchInclude\c10\core\MemoryFormat.h(86,13): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(25,3): warning C4251: “torch::nn::ReflectionPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<1>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(28,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<1>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(46,56): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<1,torch::nn::ReflectionPad1dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(25,3): warning C4251: “torch::nn::ReflectionPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<2>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(16,21): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(28,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<2>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(73,56): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<2,torch::nn::ReflectionPad2dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(25,3): warning C4251: “torch::nn::ReflectionPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<3>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(16,21): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(28,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<3>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(101,56): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<3,torch::nn::ReflectionPad3dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(68,3): warning C4251: “torch::nn::ReplicationPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<1>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(131,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<1>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(149,58): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<1,torch::nn::ReplicationPad1dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(68,3): warning C4251: “torch::nn::ReplicationPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<2>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(16,21): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(131,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<2>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(176,58): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<2,torch::nn::ReplicationPad2dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(68,3): warning C4251: “torch::nn::ReplicationPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<3>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(16,21): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(131,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<3>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(203,58): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<3,torch::nn::ReplicationPad3dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(110,3): warning C4251: “torch::nn::ZeroPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ZeroPadOptions<1>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(233,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ZeroPadOptions<1>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(238,70): message : 查看对正在编译的 类 模板 实例化“torch::nn::ZeroPadImpl<1,torch::nn::ZeroPad1dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(110,3): warning C4251: “torch::nn::ZeroPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ZeroPadOptions<2>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(16,21): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(233,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ZeroPadOptions<2>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(252,70): message : 查看对正在编译的 类 模板 实例化“torch::nn::ZeroPadImpl<2,torch::nn::ZeroPad2dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(110,3): warning C4251: “torch::nn::ZeroPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ZeroPadOptions<3>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(16,21): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(233,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ZeroPadOptions<3>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(266,70): message : 查看对正在编译的 类 模板 实例化“torch::nn::ZeroPadImpl<3,torch::nn::ZeroPad3dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(154,3): warning C4251: “torch::nn::ConstantPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<1>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\functional\conv.h(76,5): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(296,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<1>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(313,52): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<1,torch::nn::ConstantPad1dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(154,3): warning C4251: “torch::nn::ConstantPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<2>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(16,21): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(296,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<2>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(339,52): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<2,torch::nn::ConstantPad2dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\padding.h(154,3): warning C4251: “torch::nn::ConstantPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<3>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(16,21): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(296,1): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<3>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\padding.h(365,52): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<3,torch::nn::ConstantPad3dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(28,21): warning C4251: “torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>::options”: struct“torch::nn::AvgPoolOptions<1>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(44,26): message : 参见“torch::nn::AvgPoolOptions<1>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(44,70): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(28,21): warning C4251: “torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>::options”: struct“torch::nn::AvgPoolOptions<2>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(52,26): message : 参见“torch::nn::AvgPoolOptions<2>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(70,70): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(28,21): warning C4251: “torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>::options”: struct“torch::nn::AvgPoolOptions<3>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(60,26): message : 参见“torch::nn::AvgPoolOptions<3>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(96,70): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(125,21): warning C4251: “torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>::options”: struct“torch::nn::MaxPoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(134,26): message : 参见“torch::nn::MaxPoolOptions<1>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(141,70): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(125,21): warning C4251: “torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>::options”: struct“torch::nn::MaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(142,26): message : 参见“torch::nn::MaxPoolOptions<2>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(171,70): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(125,21): warning C4251: “torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>::options”: struct“torch::nn::MaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(150,26): message : 参见“torch::nn::MaxPoolOptions<3>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(201,70): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(241,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(228,13): message : 参见“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(242,2): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(241,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(206,34): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(258,79): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(241,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(215,5): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(293,68): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(241,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(224,5): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(330,68): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(374,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(361,13): message : 参见“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(375,2): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(374,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(280,34): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(391,79): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(374,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(289,5): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(422,68): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(374,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(298,5): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(455,68): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(488,23): warning C4251: “torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(366,28): message : 参见“torch::nn::MaxUnpoolOptions<1>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(504,76): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(488,23): warning C4251: “torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(374,28): message : 参见“torch::nn::MaxUnpoolOptions<2>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(536,76): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(488,23): warning C4251: “torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(382,28): message : 参见“torch::nn::MaxUnpoolOptions<3>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(568,76): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(620,30): warning C4251: “torch::nn::FractionalMaxPool2dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool2dImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(469,36): message : 参见“torch::nn::FractionalMaxPoolOptions<2>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(665,30): warning C4251: “torch::nn::FractionalMaxPool3dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool3dImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(477,36): message : 参见“torch::nn::FractionalMaxPoolOptions<3>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(692,20): warning C4251: “torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>::options”: struct“torch::nn::LPPoolOptions<1>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(533,25): message : 参见“torch::nn::LPPoolOptions<1>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(708,67): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(692,20): warning C4251: “torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>::options”: struct“torch::nn::LPPoolOptions<2>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(542,25): message : 参见“torch::nn::LPPoolOptions<2>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(736,67): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(692,20): warning C4251: “torch::nn::LPPoolImpl<3,torch::nn::LPPool3dImpl>::options”: struct“torch::nn::LPPoolOptions<3>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<3,torch::nn::LPPool3dImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\pooling.h(551,25): message : 参见“torch::nn::LPPoolOptions<3>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\pooling.h(764,67): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<3,torch::nn::LPPool3dImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\rnn.h(27,3): warning C4251: “torch::nn::detail::RNNOptionsBase::mode_”: class“std::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”需要有 dll 接口由 struct“torch::nn::detail::RNNOptionsBase”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\rnn.h(15,16): message : 参见“std::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\rnn.h(75,3): warning C4251: “torch::nn::RNNOptions::nonlinearity_”: class“std::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\rnn.h(60,16): message : 参见“std::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\rnn.h(196,3): warning C4251: “torch::nn::RNNCellOptions::nonlinearity_”: class“std::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNCellOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\rnn.h(60,16): message : 参见“std::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(83,28): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(88,2): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<Derived>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(85,41): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(85,8): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(87,23): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
C:\libtorchInclude\ATen\ops\chunk_ops.h(18,25): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(83,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(105,63): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(85,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(85,8): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(87,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
C:\libtorchInclude\ATen\ops\chunk_ops.h(18,25): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(83,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(154,65): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(85,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(85,8): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(87,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
C:\libtorchInclude\ATen\ops\chunk_ops.h(18,25): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(83,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
C:\libtorchInclude\c10\util\Exception.h(38,8): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(219,63): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的引用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(85,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(85,8): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\rnn.h(87,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
C:\libtorchInclude\ATen\ops\chunk_ops.h(18,25): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformerlayer.h(39,3): warning C4251: “torch::nn::TransformerEncoderLayerOptions::activation_”: class“std::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerEncoderLayerOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11,27): message : 参见“std::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformerlayer.h(68,3): warning C4251: “torch::nn::TransformerDecoderLayerOptions::activation_”: class“std::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerDecoderLayerOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11,27): message : 参见“std::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformer.h(54,3): warning C4251: “torch::nn::TransformerOptions::activation_”: class“std::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11,27): message : 参见“std::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformer.h(57,3): warning C4251: “torch::nn::TransformerOptions::custom_encoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\any.h(109,7): message : 参见“torch::nn::AnyModule”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformer.h(60,3): warning C4251: “torch::nn::TransformerOptions::custom_decoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\any.h(109,7): message : 参见“torch::nn::AnyModule”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformer.h(128,13): warning C4251: “torch::nn::TransformerImpl::encoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\any.h(109,7): message : 参见“torch::nn::AnyModule”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformer.h(131,13): warning C4251: “torch::nn::TransformerImpl::decoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\any.h(109,7): message : 参见“torch::nn::AnyModule”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(61,22): warning C4251: “torch::nn::TransformerEncoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\activation.h(872,1): message : 参见“torch::nn::MultiheadAttention”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(64,10): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\linear.h(83,1): message : 参见“torch::nn::Linear”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(67,11): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\dropout.h(69,1): message : 参见“torch::nn::Dropout”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(70,10): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\linear.h(83,1): message : 参见“torch::nn::Linear”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(73,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\normalization.h(73,1): message : 参见“torch::nn::LayerNorm”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(75,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\normalization.h(73,1): message : 参见“torch::nn::LayerNorm”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(78,11): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\dropout.h(69,1): message : 参见“torch::nn::Dropout”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(80,11): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\dropout.h(69,1): message : 参见“torch::nn::Dropout”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(144,22): warning C4251: “torch::nn::TransformerDecoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\activation.h(872,1): message : 参见“torch::nn::MultiheadAttention”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(147,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\dropout.h(69,1): message : 参见“torch::nn::Dropout”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(150,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\normalization.h(73,1): message : 参见“torch::nn::LayerNorm”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(153,22): warning C4251: “torch::nn::TransformerDecoderLayerImpl::multihead_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\activation.h(872,1): message : 参见“torch::nn::MultiheadAttention”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(156,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\dropout.h(69,1): message : 参见“torch::nn::Dropout”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(159,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\normalization.h(73,1): message : 参见“torch::nn::LayerNorm”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(162,10): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\linear.h(83,1): message : 参见“torch::nn::Linear”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(165,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\dropout.h(69,1): message : 参见“torch::nn::Dropout”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(168,10): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\linear.h(83,1): message : 参见“torch::nn::Linear”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(171,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout3”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\dropout.h(69,1): message : 参见“torch::nn::Dropout”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(174,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm3”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\normalization.h(73,1): message : 参见“torch::nn::LayerNorm”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformercoder.h(35,3): warning C4251: “torch::nn::TransformerEncoderOptions::encoder_layer_”: class“torch::nn::TransformerEncoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(88,1): message : 参见“torch::nn::TransformerEncoderLayer”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformercoder.h(41,3): warning C4251: “torch::nn::TransformerEncoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\any.h(109,7): message : 参见“torch::nn::AnyModule”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformercoder.h(66,3): warning C4251: “torch::nn::TransformerDecoderOptions::decoder_layer_”: class“torch::nn::TransformerDecoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(192,1): message : 参见“torch::nn::TransformerDecoderLayer”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\options\transformercoder.h(72,3): warning C4251: “torch::nn::TransformerDecoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\any.h(109,7): message : 参见“torch::nn::AnyModule”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformercoder.h(63,14): warning C4251: “torch::nn::TransformerEncoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(271,1): message : 参见“torch::nn::ModuleList”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformercoder.h(66,13): warning C4251: “torch::nn::TransformerEncoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\any.h(109,7): message : 参见“torch::nn::AnyModule”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformercoder.h(132,14): warning C4251: “torch::nn::TransformerDecoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(271,1): message : 参见“torch::nn::ModuleList”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\transformercoder.h(135,13): warning C4251: “torch::nn::TransformerDecoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\nn\modules\container\any.h(109,7): message : 参见“torch::nn::AnyModule”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\optimizer.h(104,23): warning C4251: “torch::optim::OptimizerParamGroup::params_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
C:\libtorchInclude\ATen\ops\chunk_ops.h(18,25): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\optimizer.h(105,37): warning C4251: “torch::optim::OptimizerParamGroup::options_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\optim\optimizer.h(62,16): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\optimizer.h(183,36): warning C4251: “torch::optim::Optimizer::param_groups_”: class“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\optim\optimizer.h(116,12): message : 参见“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\optimizer.h(184,67): warning C4251: “torch::optim::Optimizer::state_”: class“ska::flat_hash_map<void *,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<void *>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
          with
          [
              K=void *,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\optim\optimizer.h(169,8): message : 参见“ska::flat_hash_map<void *,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<void *>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=void *,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
C:\libtorchInclude\torch\csrc\api\include\torch\optim\optimizer.h(185,37): warning C4251: “torch::optim::Optimizer::defaults_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\optim\optimizer.h(62,16): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\adam.h(24,3): warning C4251: “torch::optim::AdamOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\optim\adam.h(23,16): message : 参见“std::tuple<double,double>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\adamw.h(24,3): warning C4251: “torch::optim::AdamWOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamWOptions”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\optim\adam.h(23,16): message : 参见“std::tuple<double,double>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\lbfgs.h(20,3): warning C4251: “torch::optim::LBFGSOptions::max_eval_”: class“std::optional<int64_t>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\lbfgs.h(24,3): warning C4251: “torch::optim::LBFGSOptions::line_search_fn_”: class“std::optional<std::string>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
C:\libtorchInclude\c10\core\TensorImpl.h(236,8): message : 参见“std::optional<std::string>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\lbfgs.h(45,3): warning C4251: “torch::optim::LBFGSParamState::old_dirs_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\optim\lbfgs.h(45,3): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\lbfgs.h(46,3): warning C4251: “torch::optim::LBFGSParamState::old_stps_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\optim\lbfgs.h(45,3): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\lbfgs.h(47,3): warning C4251: “torch::optim::LBFGSParamState::ro_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\optim\lbfgs.h(45,3): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\lbfgs.h(48,3): warning C4251: “torch::optim::LBFGSParamState::al_”: class“std::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\variable.h(355,12): message : 参见“std::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\lbfgs.h(85,26): warning C4251: “torch::optim::LBFGS::_numel_cache”: class“std::optional<int64_t>”需要有 dll 接口由 class“torch::optim::LBFGS”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\torch\csrc\api\include\torch\optim\schedulers\reduce_on_plateau_scheduler.h(56,22): warning C4251: “torch::optim::ReduceLROnPlateauScheduler::min_lrs”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::optim::ReduceLROnPlateauScheduler”的客户端使用
          with
          [
              T=float
          ]
C:\libtorchInclude\c10\util\ArrayRef.h(256,8): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=float
          ]
C:\libtorchInclude\caffe2\serialize\inline_container.h(118,43): warning C4251: “caffe2::serialize::ChunkRecordIterator::iter_”: class“std::unique_ptr<caffe2::serialize::MzZipReaderIterWrapper,std::default_delete<caffe2::serialize::MzZipReaderIterWrapper>>”需要有 dll 接口由 class“caffe2::serialize::ChunkRecordIterator”的客户端使用
C:\libtorchInclude\caffe2\serialize\inline_container.h(113,12): message : 参见“std::unique_ptr<caffe2::serialize::MzZipReaderIterWrapper,std::default_delete<caffe2::serialize::MzZipReaderIterWrapper>>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(195,35): warning C4251: “caffe2::serialize::PyTorchStreamReader::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\libtorchInclude\caffe2\serialize\inline_container.h(195,8): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(196,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(197,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(198,41): warning C4251: “caffe2::serialize::PyTorchStreamReader::in_”: class“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\libtorchInclude\caffe2\serialize\inline_container.h(127,37): message : 参见“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(200,14): warning C4251: “caffe2::serialize::PyTorchStreamReader::reader_lock_”: class“std::mutex”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(86,19): message : 参见“std::mutex”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(202,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::serialization_id_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(242,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::files_written_”: class“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\libtorchInclude\torch\custom_class.h(490,12): message : 参见“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(243,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\libtorchInclude\caffe2\serialize\inline_container.h(195,8): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(244,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(245,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(246,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::padding_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(247,17): warning C4251: “caffe2::serialize::PyTorchStreamWriter::file_stream_”: class“std::basic_ofstream<char,std::char_traits<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\iosfwd(244,35): message : 参见“std::basic_ofstream<char,std::char_traits<char>>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(248,46): warning C4251: “caffe2::serialize::PyTorchStreamWriter::writer_func_”: class“std::function<size_t (const void *,size_t)>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\serialize\output-archive.h(67,27): message : 参见“std::function<size_t (const void *,size_t)>”的声明
C:\libtorchInclude\caffe2\serialize\inline_container.h(250,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::serialization_id_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(236,44): warning C4251: “torch::jit::Pickler::writer_”: class“std::function<void (const char *,size_t)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(127,16): message : 参见“std::function<void (const char *,size_t)>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(243,21): warning C4251: “torch::jit::Pickler::stack_”: class“std::vector<char,std::allocator<char>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\libtorchInclude\torch\csrc\api\include\torch\serialize.h(75,16): message : 参见“std::vector<char,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(255,39): warning C4251: “torch::jit::Pickler::memoized_ivalue_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\libtorchInclude\c10\util\FbcodeMaps.h(23,22): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(261,23): warning C4251: “torch::jit::Pickler::memoized_ivalues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\libtorchInclude\c10\core\impl\PyInterpreter.h(24,20): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(263,63): warning C4251: “torch::jit::Pickler::type_renamer_”: class“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(134,12): message : 参见“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(270,49): warning C4251: “torch::jit::Pickler::get_tensor_id_”: class“std::function<std::string (const at::Tensor &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(136,12): message : 参见“std::function<std::string (const at::Tensor &)>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(274,27): warning C4251: “torch::jit::Pickler::tensor_data_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\libtorchInclude\ATen\ops\chunk_ops.h(18,25): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(275,39): warning C4251: “torch::jit::Pickler::memoized_storage_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\libtorchInclude\c10\util\FbcodeMaps.h(23,22): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(277,39): warning C4251: “torch::jit::Pickler::memoized_globals_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\libtorchInclude\c10\util\FbcodeMaps.h(23,22): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(278,39): warning C4251: “torch::jit::Pickler::memoized_strings_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\libtorchInclude\c10\util\FbcodeMaps.h(23,22): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\pickler.h(279,39): warning C4251: “torch::jit::Pickler::memoized_devices_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\libtorchInclude\c10\util\FbcodeMaps.h(23,22): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\lexer.h(399,16): warning C4251: “torch::jit::SharedParserData::head”: class“std::unique_ptr<torch::jit::TokenTrie,std::default_delete<torch::jit::TokenTrie>>”需要有 dll 接口由 struct“torch::jit::SharedParserData”的客户端使用
C:\libtorchInclude\torch\csrc\jit\frontend\lexer.h(144,27): message : 参见“std::unique_ptr<torch::jit::TokenTrie,std::default_delete<torch::jit::TokenTrie>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\lexer.h(425,1): warning C4267: “参数”: 从“size_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int32_t
          ]
C:\libtorchInclude\torch\csrc\jit\frontend\lexer.h(510,34): warning C4244: “参数”: 从“const int64_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int32_t
          ]
C:\libtorchInclude\torch\csrc\jit\frontend\error_report.h(14,54): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“torch::jit::ErrorReport”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\exception(38,19): message : 参见“std::exception”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\error_report.h(14,18): message : 参见“torch::jit::ErrorReport”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\error_report.h(41,29): warning C4251: “torch::jit::ErrorReport::ss”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\iosfwd(241,35): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\error_report.h(42,20): warning C4251: “torch::jit::ErrorReport::context”: struct“torch::jit::OwnedSourceRange”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\libtorchInclude\torch\csrc\jit\frontend\source_range.h(402,8): message : 参见“torch::jit::OwnedSourceRange”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\error_report.h(43,23): warning C4251: “torch::jit::ErrorReport::the_message”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\error_report.h(44,21): warning C4251: “torch::jit::ErrorReport::error_stack”: class“std::vector<torch::jit::Call,std::allocator<torch::jit::Call>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\libtorchInclude\torch\csrc\jit\frontend\error_report.h(44,8): message : 参见“std::vector<torch::jit::Call,std::allocator<torch::jit::Call>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(30,57): warning C4251: “std::enable_shared_from_this<torch::jit::SugaredValue>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::jit::SugaredValue>”的客户端使用
          with
          [
              _Ty=torch::jit::SugaredValue
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\memory(3028,16): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::SugaredValue
          ]
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(223,29): warning C4251: “torch::jit::BuiltinFunction::self”: class“std::optional<torch::jit::NamedValue>”需要有 dll 接口由 struct“torch::jit::BuiltinFunction”的客户端使用
C:\libtorchInclude\torch\csrc\jit\frontend\schema_matching.h(31,16): message : 参见“std::optional<torch::jit::NamedValue>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(304,46): warning C4251: “torch::jit::SugaredTupleValue::tup_”: class“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”需要有 dll 接口由 struct“torch::jit::SugaredTupleValue”的客户端使用
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(67,16): message : 参见“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(330,15): warning C4251: “torch::jit::BuiltinModule::name”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::BuiltinModule”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(333,26): warning C4251: “torch::jit::BuiltinModule::version”: class“std::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::BuiltinModule”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(359,16): warning C4251: “torch::jit::ClassValue::type_”: class“std::shared_ptr<c10::ClassType>”需要有 dll 接口由 struct“torch::jit::ClassValue”的客户端使用
C:\libtorchInclude\ATen\core\custom_class.h(13,27): message : 参见“std::shared_ptr<c10::ClassType>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(376,16): warning C4251: “torch::jit::NamedTupleConstructor::type_”: class“std::shared_ptr<c10::TupleType>”需要有 dll 接口由 struct“torch::jit::NamedTupleConstructor”的客户端使用
C:\libtorchInclude\ATen\core\jit_type.h(1142,27): message : 参见“std::shared_ptr<c10::TupleType>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(537,11): warning C4251: “torch::jit::CastValue::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“torch::jit::CastValue”的客户端使用
C:\libtorchInclude\ATen\core\jit_type_base.h(391,19): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(567,14): warning C4251: “torch::jit::TensorCastValue::self_”: struct“torch::jit::NamedValue”需要有 dll 接口由 struct“torch::jit::TensorCastValue”的客户端使用
C:\libtorchInclude\torch\csrc\jit\ir\named_value.h(16,8): message : 参见“torch::jit::NamedValue”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(589,19): warning C4251: “torch::jit::MagicMethod::base_value_”: class“std::shared_ptr<torch::jit::SugaredValue>”需要有 dll 接口由 struct“torch::jit::MagicMethod”的客户端使用
C:\libtorchInclude\torch\csrc\jit\api\compilation_unit.h(36,16): message : 参见“std::shared_ptr<torch::jit::SugaredValue>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(590,15): warning C4251: “torch::jit::MagicMethod::desugared_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::MagicMethod”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(670,26): warning C4251: “torch::jit::RangeValue::static_len_”: class“std::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::RangeValue”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(733,26): warning C4251: “torch::jit::IterableTree::unroll_length_”: class“std::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::IterableTree”的客户端使用
C:\libtorchInclude\c10\core\SymNodeImpl.h(209,16): message : 参见“std::optional<int64_t>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(734,32): warning C4251: “torch::jit::IterableTree::children_”: class“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”需要有 dll 接口由 struct“torch::jit::IterableTree”的客户端使用
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(67,16): message : 参见“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(810,15): warning C4251: “torch::jit::ExceptionValue::message_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ExceptionValue”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xstring(5300,29): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\sugared_value.h(829,15): warning C4251: “torch::jit::SugaredEnumClass::enum_type_”: class“std::shared_ptr<c10::EnumType>”需要有 dll 接口由 struct“torch::jit::SugaredEnumClass”的客户端使用
C:\libtorchInclude\ATen\core\ivalue_inl.h(1625,19): message : 参见“std::shared_ptr<c10::EnumType>”的声明
C:\libtorchInclude\torch\csrc\jit\frontend\script_type_parser.h(48,15): warning C4251: “torch::jit::ScriptTypeParser::resolver_”: class“std::shared_ptr<torch::jit::Resolver>”需要有 dll 接口由 class“torch::jit::ScriptTypeParser”的客户端使用
C:\libtorchInclude\torch\csrc\jit\api\object.h(13,26): message : 参见“std::shared_ptr<torch::jit::Resolver>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(154,40): warning C4251: “torch::jit::Unpickler::reader_”: class“std::function<size_t (char *,size_t)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(38,12): message : 参见“std::function<size_t (char *,size_t)>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(160,23): warning C4251: “torch::jit::Unpickler::stack_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\libtorchInclude\c10\core\impl\PyInterpreter.h(24,20): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(164,42): warning C4251: “torch::jit::Unpickler::globals_”: class“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\libtorchInclude\torch\csrc\autograd\graph_task.h(183,8): message : 参见“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(165,23): warning C4251: “torch::jit::Unpickler::memo_table_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\libtorchInclude\c10\core\impl\PyInterpreter.h(24,20): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(166,23): warning C4251: “torch::jit::Unpickler::marks_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              T=size_t
          ]
C:\libtorchInclude\c10\util\ArrayRef.h(256,8): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=size_t
          ]
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(167,29): warning C4251: “torch::jit::Unpickler::tensor_table_”: class“c10::ArrayRef<at::Tensor>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\libtorchInclude\ATen\core\ATen_fwd.h(30,25): message : 参见“c10::ArrayRef<at::Tensor>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(173,49): warning C4251: “torch::jit::Unpickler::type_cache_”: class“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\libtorchInclude\ATen\core\type_factory.h(50,21): message : 参见“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(176,16): warning C4251: “torch::jit::Unpickler::type_resolver_”: class“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(14,10): message : 参见“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(177,13): warning C4251: “torch::jit::Unpickler::obj_loader_”: class“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (const c10::StrongTypePtr &,c10::IValue)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(16,24): message : 参见“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (const c10::StrongTypePtr &,c10::IValue)>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(180,50): warning C4251: “torch::jit::Unpickler::read_record_”: class“std::function<c10::DataPtr (const std::string &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(70,12): message : 参见“std::function<c10::DataPtr (const std::string &)>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(181,29): warning C4251: “torch::jit::Unpickler::device_”: class“std::optional<c10::Device>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\libtorchInclude\c10\core\StorageImpl.h(328,10): message : 参见“std::optional<c10::Device>”的声明
C:\libtorchInclude\torch\csrc\jit\serialization\unpickler.h(191,50): warning C4251: “torch::jit::Unpickler::storage_context_”: class“std::shared_ptr<torch::jit::DeserializationStorageContext>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\libtorchInclude\torch\csrc\jit\serialization\import.h(51,10): message : 参见“std::shared_ptr<torch::jit::DeserializationStorageContext>”的声明
C:\libtorchInclude\c10\core\impl\GPUTrace.h(9,44): warning C4251: “c10::impl::GPUTrace::gpuTraceState”: struct“std::atomic<const c10::impl::PyInterpreter *>”需要有 dll 接口由 struct“c10::impl::GPUTrace”的客户端使用
C:\libtorchInclude\c10\core\impl\GPUTrace.h(9,15): message : 参见“std::atomic<const c10::impl::PyInterpreter *>”的声明
C:\libtorchInclude\c10\cuda\CUDADeviceAssertionHost.h(96,22): warning C4251: “c10::cuda::CUDAKernelLaunchRegistry::read_write_mutex”: class“std::mutex”需要有 dll 接口由 class“c10::cuda::CUDAKernelLaunchRegistry”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(86,19): message : 参见“std::mutex”的声明
C:\libtorchInclude\c10\cuda\CUDADeviceAssertionHost.h(98,22): warning C4251: “c10::cuda::CUDAKernelLaunchRegistry::gpu_alloc_mutex”: class“std::mutex”需要有 dll 接口由 class“c10::cuda::CUDAKernelLaunchRegistry”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\mutex(86,19): message : 参见“std::mutex”的声明
C:\libtorchInclude\c10\cuda\CUDADeviceAssertionHost.h(106,7): warning C4251: “c10::cuda::CUDAKernelLaunchRegistry::uvm_assertions”: class“std::vector<std::unique_ptr<c10::cuda::DeviceAssertionsData,void (__cdecl *)(c10::cuda::DeviceAssertionsData *)>,std::allocator<std::unique_ptr<c10::cuda::DeviceAssertionsData,void (__cdecl *)(c10::cuda::DeviceAssertionsData *)>>>”需要有 dll 接口由 class“c10::cuda::CUDAKernelLaunchRegistry”的客户端使用
C:\libtorchInclude\c10\cuda\CUDADeviceAssertionHost.h(104,8): message : 参见“std::vector<std::unique_ptr<c10::cuda::DeviceAssertionsData,void (__cdecl *)(c10::cuda::DeviceAssertionsData *)>,std::allocator<std::unique_ptr<c10::cuda::DeviceAssertionsData,void (__cdecl *)(c10::cuda::DeviceAssertionsData *)>>>”的声明
C:\libtorchInclude\c10\cuda\CUDADeviceAssertionHost.h(109,37): warning C4251: “c10::cuda::CUDAKernelLaunchRegistry::kernel_launches”: class“std::vector<c10::cuda::CUDAKernelLaunchInfo,std::allocator<c10::cuda::CUDAKernelLaunchInfo>>”需要有 dll 接口由 class“c10::cuda::CUDAKernelLaunchRegistry”的客户端使用
C:\libtorchInclude\c10\cuda\CUDADeviceAssertionHost.h(109,8): message : 参见“std::vector<c10::cuda::CUDAKernelLaunchInfo,std::allocator<c10::cuda::CUDAKernelLaunchInfo>>”的声明
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4\include\cuda.h(22423,1): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失
C:\PCL 1.14.1\include\pcl-1.14\pcl\visualization\interactor_style.h(1,1): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失
C:\PCL 1.14.1\include\pcl-1.14\pcl\visualization\pcl_visualizer.h(1603,1): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失
C:\PCL 1.14.1\3rdParty\VTK\include\vtk-9.3\vtkPolyDataMapper.h(1,1): warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失
C:\libtorchInclude\torch\csrc\jit\runtime\jit_exception.h(11,59): warning C4275: 非 dll 接口 class“std::runtime_error”用作 dll 接口 struct“torch::jit::JITException”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\stdexcept(101,19): message : 参见“std::runtime_error”的声明
C:\libtorchInclude\torch\csrc\jit\runtime\jit_exception.h(11,18): message : 参见“torch::jit::JITException”的声明
C:\libtorchInclude\c10\util\SmallVector.h(99,1): warning C4267: “=”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\libtorchInclude\c10\util\SmallVector.h(97,1): message : 在编译 类 模板 成员函数“void c10::SmallVectorBase<unsigned int>::set_size(size_t)”时
C:\libtorchInclude\c10\util\SmallVector.h(479,19): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorBase<unsigned int>::set_size(size_t)”的引用
C:\libtorchInclude\c10\util\SmallVector.h(122): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorBase<unsigned int>”的引用
C:\libtorchInclude\c10\util\SmallVector.h(376): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorTemplateCommon<T,void>”的引用
          with
          [
              T=c10::SymInt
          ]
C:\libtorchInclude\c10\util\SmallVector.h(632): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorTemplateBase<T,false>”的引用
          with
          [
              T=c10::SymInt
          ]
C:\libtorchInclude\c10\util\SmallVector.h(1274): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorImpl<T>”的引用
          with
          [
              T=c10::SymInt
          ]
C:\libtorchInclude\c10\core\SymbolicShapeMeta.h(18,16): message : 查看对正在编译的 类 模板 实例化“c10::SmallVector<c10::SymInt,5>”的引用
C:\libtorchInclude\c10\util\SmallVector.h(63): warning C4267: “初始化”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\libtorchInclude\c10\util\SmallVector.h(62,1): message : 在编译 类 模板 成员函数“c10::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”时
C:\libtorchInclude\c10\util\SmallVector.h(136,48): message : 查看对正在编译的函数 模板 实例化“c10::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”的引用
C:\libtorchInclude\c10\util\complex.h(172,14): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
C:\libtorchInclude\c10\util\TypeCast.h(170,1): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
C:\libtorchInclude\c10\util\TypeCast.h(169,5): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
C:\libtorchInclude\c10\util\complex.h(172,34): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
C:\libtorchInclude\c10\util\TypeCast.h(68,32): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(65,1): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::Float8_e4m3fnuz,
              From=uint64_t,
              src_t=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,3): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::Float8_e4m3fnuz,
              From=uint64_t,
              src_t=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,1): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(188,1): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=uint64_t
          ]
C:\libtorchInclude\c10\core\Scalar.h(139): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::Float8_e4m3fnuz,uint64_t>(From,const char *)”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(68,32): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(65,1): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::Float8_e4m3fnuz,
              From=int64_t,
              src_t=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,3): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::Float8_e4m3fnuz,
              From=int64_t,
              src_t=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,1): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(188,1): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=int64_t
          ]
C:\libtorchInclude\c10\core\Scalar.h(139): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::Float8_e4m3fnuz,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(68,32): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\libtorchInclude\c10\util\TypeCast.h(65,1): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::Float8_e4m3fnuz,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,3): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::Float8_e4m3fnuz,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,1): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=c10::complex<double>
          ]
C:\libtorchInclude\c10\util\TypeCast.h(188,1): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=c10::complex<double>
          ]
C:\libtorchInclude\c10\core\Scalar.h(139): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::Float8_e4m3fnuz,c10::complex<double>>(From,const char *)”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=c10::complex<double>
          ]
C:\libtorchInclude\c10\util\TypeCast.h(68,32): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=double
          ]
C:\libtorchInclude\c10\util\TypeCast.h(65,1): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::Float8_e4m3fnuz,
              From=double,
              src_t=double
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,3): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::Float8_e4m3fnuz,
              From=double,
              src_t=double
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,1): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=double
          ]
C:\libtorchInclude\c10\util\TypeCast.h(188,1): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=double
          ]
C:\libtorchInclude\c10\core\Scalar.h(139): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::Float8_e4m3fnuz,double>(From,const char *)”的引用
          with
          [
              To=c10::Float8_e4m3fnuz,
              From=double
          ]
C:\libtorchInclude\c10\util\TypeCast.h(68,32): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=uint64_t
          ]
          and
          [
              T=double
          ]
C:\libtorchInclude\c10\util\TypeCast.h(65,1): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<double>,
              From=uint64_t,
              src_t=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,3): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<double>,
              From=uint64_t,
              src_t=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,1): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<double>,
              From=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(188,1): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<double>,
              From=uint64_t
          ]
C:\libtorchInclude\c10\core\Scalar.h(139): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<double>,uint64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<double>,
              From=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(68,32): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=double
          ]
C:\libtorchInclude\c10\util\TypeCast.h(65,1): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,3): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,1): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(188,1): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\libtorchInclude\c10\core\Scalar.h(139): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<double>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(68,32): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=uint64_t
          ]
          and
          [
              T=float
          ]
C:\libtorchInclude\c10\util\TypeCast.h(65,1): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=uint64_t,
              src_t=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,3): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=uint64_t,
              src_t=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,1): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(188,1): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=uint64_t
          ]
C:\libtorchInclude\c10\core\Scalar.h(139): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,uint64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=uint64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(68,32): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=float
          ]
C:\libtorchInclude\c10\util\TypeCast.h(65,1): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,3): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,1): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(188,1): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\libtorchInclude\c10\core\Scalar.h(139): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\libtorchInclude\c10\util\TypeCast.h(68,32): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=double
          ]
          and
          [
              T=float
          ]
C:\libtorchInclude\c10\util\TypeCast.h(65,1): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,3): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
C:\libtorchInclude\c10\util\TypeCast.h(176,1): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\libtorchInclude\c10\util\TypeCast.h(188,1): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\libtorchInclude\c10\core\Scalar.h(139): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,double>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\libtorchInclude\c10\util\SmallVector.h(518,1): warning C4267: “=”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\libtorchInclude\c10\util\SmallVector.h(512,25): message : 在编译 类 模板 成员函数“void c10::SmallVectorTemplateBase<T,false>::takeAllocationForGrow(T *,size_t)”时
          with
          [
              T=torch::autograd::InputMetadata
          ]
C:\libtorchInclude\c10\util\SmallVector.h(463,26): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorTemplateBase<T,false>::takeAllocationForGrow(T *,size_t)”的引用
          with
          [
              T=torch::autograd::InputMetadata
          ]
C:\libtorchInclude\c10\util\SmallVector.h(999): message : 查看对正在编译的函数 模板 实例化“T &c10::SmallVectorTemplateBase<T,false>::growAndEmplaceBack<const c10::TensorOptions&,torch::autograd::MetadataShape&,bool&,bool&>(const c10::TensorOptions &,torch::autograd::MetadataShape &,bool &,bool &)”的引用
          with
          [
              T=torch::autograd::InputMetadata
          ]
C:\libtorchInclude\c10\util\SmallVector.h(1001,7): message : 查看对正在编译的函数 模板 实例化“T &c10::SmallVectorTemplateBase<T,false>::growAndEmplaceBack<const c10::TensorOptions&,torch::autograd::MetadataShape&,bool&,bool&>(const c10::TensorOptions &,torch::autograd::MetadataShape &,bool &,bool &)”的引用
          with
          [
              T=torch::autograd::InputMetadata
          ]
C:\libtorchInclude\torch\csrc\autograd\function.h(203,1): message : 查看对正在编译的函数 模板 实例化“torch::autograd::InputMetadata &c10::SmallVectorImpl<T>::emplace_back<const c10::TensorOptions&,torch::autograd::MetadataShape&,bool&,bool&>(const c10::TensorOptions &,torch::autograd::MetadataShape &,bool &,bool &)”的引用
          with
          [
              T=torch::autograd::InputMetadata
          ]
C:\libtorchInclude\torch\csrc\autograd\function.h(202,33): message : 查看对正在编译的函数 模板 实例化“torch::autograd::InputMetadata &c10::SmallVectorImpl<T>::emplace_back<const c10::TensorOptions&,torch::autograd::MetadataShape&,bool&,bool&>(const c10::TensorOptions &,torch::autograd::MetadataShape &,bool &,bool &)”的引用
          with
          [
              T=torch::autograd::InputMetadata
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility(268): warning C4267: “初始化”: 从“size_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(852): message : 查看对正在编译的函数 模板 实例化“void std::_Construct_in_place<int,size_t&>(_Ty &,size_t &) noexcept”的引用
          with
          [
              _Ty=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(839): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_back_with_unused_capacity<size_t&>(size_t &)”的引用
          with
          [
              _Ty=int32_t
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(845,13): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_back_with_unused_capacity<size_t&>(size_t &)”的引用
          with
          [
              _Ty=int32_t
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(925): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_one_at_back<size_t&>(size_t &)”的引用
          with
          [
              _Ty=int32_t
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(927,14): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_one_at_back<size_t&>(size_t &)”的引用
          with
          [
              _Ty=int32_t
          ]
C:\libtorchInclude\torch\csrc\dynamo\compiled_autograd.h(439,1): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::emplace_back<size_t&>(size_t &)”的引用
          with
          [
              _Ty=int32_t
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xmemory(673): warning C4267: “初始化”: 从“size_t”转换到“_Objty”，可能丢失数据
          with
          [
              _Objty=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(875): message : 查看对正在编译的函数 模板 实例化“void std::_Default_allocator_traits<_Alloc>::construct<_Ty,size_t&>(_Alloc &,_Objty *const ,size_t &)”的引用
          with
          [
              _Alloc=std::allocator<int>,
              _Ty=int,
              _Objty=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(899,32): message : 查看对正在编译的函数 模板 实例化“void std::_Default_allocator_traits<_Alloc>::construct<_Ty,size_t&>(_Alloc &,_Objty *const ,size_t &)”的引用
          with
          [
              _Alloc=std::allocator<int>,
              _Ty=int,
              _Objty=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(839): message : 查看对正在编译的函数 模板 实例化“int *std::vector<int32_t,std::allocator<int>>::_Emplace_reallocate<size_t&>(int *const ,size_t &)”的引用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(848,9): message : 查看对正在编译的函数 模板 实例化“int *std::vector<int32_t,std::allocator<int>>::_Emplace_reallocate<size_t&>(int *const ,size_t &)”的引用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\utility(172): warning C4267: “初始化”: 从“size_t”转换到“_Ty1”，可能丢失数据
          with
          [
              _Ty1=int
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility(268): message : 查看对正在编译的函数 模板 实例化“std::pair<int,int>::pair<size_t&,int&,0>(_Other1,_Other2) noexcept”的引用
          with
          [
              _Other1=size_t &,
              _Other2=int &
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\xutility(275,56): message : 查看对正在编译的函数 模板 实例化“std::pair<int,int>::pair<size_t&,int&,0>(_Other1,_Other2) noexcept”的引用
          with
          [
              _Other1=size_t &,
              _Other2=int &
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(852): message : 查看对正在编译的函数 模板 实例化“void std::_Construct_in_place<std::pair<int,int>,size_t&,int&>(_Ty &,size_t &,int &) noexcept”的引用
          with
          [
              _Ty=std::pair<int,int>
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(839): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_back_with_unused_capacity<size_t&,int&>(size_t &,int &)”的引用
          with
          [
              _Ty=std::pair<int,int>
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(845,13): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_back_with_unused_capacity<size_t&,int&>(size_t &,int &)”的引用
          with
          [
              _Ty=std::pair<int,int>
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(925): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_one_at_back<size_t&,int&>(size_t &,int &)”的引用
          with
          [
              _Ty=std::pair<int,int>
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\include\vector(927,14): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::_Emplace_one_at_back<size_t&,int&>(size_t &,int &)”的引用
          with
          [
              _Ty=std::pair<int,int>
          ]
C:\libtorchInclude\torch\csrc\dynamo\compiled_autograd.h(433,1): message : 查看对正在编译的函数 模板 实例化“_Ty &std::vector<_Ty,std::allocator<_Ty>>::emplace_back<size_t&,int&>(size_t &,int &)”的引用
          with
          [
              _Ty=std::pair<int,int>
          ]
  3dgs.vcxproj -> C:\mytinyrenderproj\MyRenderer\x64\Debug\da\3dgs.exe
